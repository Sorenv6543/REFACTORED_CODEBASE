This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.cursor/mcp.json
.eslintrc.js
.gitignore
.prettierrc
global_mpc,json
index.html
package.json
README.md
src/App.vue
src/assets/main.css
src/components/EventEditModal.vue
src/components/EventModal.vue
src/components/FullCalendar.vue
src/components/Home.vue
src/components/HouseModal.vue
src/components/NavigationBar.vue
src/components/Playground.vue
src/components/Playground2.vue
src/components/Register.vue
src/components/TimePicker.vue
src/components/Userprofile.vue
src/constants/calendar.ts
src/constants/index.ts
src/main.ts
src/models/auth.ts
src/models/calendar.ts
src/models/cleaning-job.ts
src/models/house.ts
src/models/index.ts
src/models/property.ts
src/models/services.ts
src/models/store.ts
src/models/user.ts
src/plugins/vuetify.ts
src/router.ts
src/router/index.ts
src/stores/auth.ts
src/stores/booking.ts
src/stores/calendar.ts
src/stores/cleaning-job.ts
src/stores/house.ts
src/stores/notification.ts
src/stores/property.ts
src/stores/ui.ts
src/stores/user.ts
src/types/auth.d.ts
src/types/calendar.ts
src/types/components.d.ts
src/types/firebase.d.ts
src/types/home.ts
src/types/house.ts
src/types/timeManagement.d.ts
src/types/userStore.d.ts
tailwind.config.js
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".cursor/mcp.json">
{
    "mcpServers": {
        "filesystem": {
            "command": "cmd /c",
            "args": [
                "npx -y @modelcontextprotocol/server-filesystem",
                "C:\\Users\\Soren\\Documents\\"
            ]
        },
        "sequential-thinking": {
            "command": "cmd /c",
            "args": [
                "npx -y @modelcontextprotocol/server-sequential-thinking",
                "C:\\Program Files\\nodejs\\node.exe"
            ]
        },
        "browser-tools": {
            "command": "cmd /c",
            "args": [
                "npx -y @yarlisai/modern-browser-tools-mcp"
            ],
            "enabled": true
        }
    }
}
</file>

<file path=".eslintrc.js">
/* eslint-env node */
require('@rushstack/eslint-patch/modern-module-resolution')

module.exports = {
  root: true,
  extends: [
    'plugin:vue/vue3-essential',
    'eslint:recommended',
    '@vue/eslint-config-typescript',
    '@vue/eslint-config-prettier'
  ],
  parserOptions: {
    ecmaVersion: 'latest'
  },
  rules: {
    'vue/multi-word-component-names': 'off',
    'vue/no-v-html': 'off',
    'vue/require-default-prop': 'off',
    '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
    'no-console': process.env.NODE_ENV === 'production' ? 'warn' : 'off',
    'no-debugger': process.env.NODE_ENV === 'production' ? 'warn' : 'off'
  }
}
</file>

<file path=".gitignore">
node_modules
</file>

<file path=".prettierrc">
{
  "semi": false,
  "singleQuote": true,
  "printWidth": 100,
  "tabWidth": 2,
  "useTabs": false,
  "trailingComma": "none",
  "bracketSpacing": true,
  "arrowParens": "avoid",
  "endOfLine": "auto"
}
</file>

<file path="global_mpc,json">
{
    "mcpServers": {
            "allpepper-memory-bank": {
              "command": "npx",
              "args": ["-y", "@allpepper/memory-bank-mcp"],
              "env": {
                "MEMORY_BANK_ROOT": "C:\\Users\\Soren\\.memory-bank"
              },
              "disabled": false,
              "autoApprove": [
                "memory_bank_read",
                "memory_bank_write",
                "memory_bank_update",
                "list_projects",
                "list_project_files"
              ]
            },
        "filesystem": {
            "command": "cmd /c",
            "args": [
                "npx -y @modelcontextprotocol/server-filesystem",
                "C:\\Users\\Soren\\"
            ]
        },
        "sequential-thinking": {
            "command": "cmd /c",
            "args": [
                "npx -y @modelcontextprotocol/server-sequential-thinking",
                "C:\\Program Files\\nodejs\\node.exe"
            ]
        },

        "context7": {
            "command": "cmd /c",
            "args": [
                "npx -y @upstash/context7-mcp@v1.0.8"
            ]
        },
        "browser-tools": {
            "command": "cmd /c",
            "args": [
                "npx -y @agentdeskai/browser-tools-mcp@1.2.1"
            ],
            "enabled": true
        },  
        "mcp-compass": {
            "command": "node",
            "args": [
               "C:\\Users\\soren\\AppData\\Roaming\\npm\\node_modules\\@upstash\\context7-mcp\\dist\\index.js"
            ]
         },
         "playwright": {
            "command": "npx",
            "args": [
              "@playwright/mcp@latest"
            ]
          }


        }
    
}
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Booking Calendar App</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>
</file>

<file path="src/App.vue">
<script setup lang="ts">
import { RouterView } from 'vue-router'
</script>

<template>
  <div class="min-h-screen bg-gray-50">
    <RouterView />
  </div>
</template>

<style>
@tailwind base;
@tailwind components;
@tailwind utilities;
</style>
</file>

<file path="src/assets/main.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --primary: #4f46e5;
    --primary-dark: #4338ca;
    --secondary: #10b981;
    --secondary-dark: #059669;
    --accent: #f59e0b;
    --accent-dark: #d97706;
    --danger: #ef4444;
    --danger-dark: #dc2626;
    --success: #10b981;
    --success-dark: #059669;
    --warning: #f59e0b;
    --warning-dark: #d97706;
    --info: #3b82f6;
    --info-dark: #2563eb;
  }

  body {
    @apply bg-gray-50 text-gray-900 dark:bg-gray-900 dark:text-gray-100;
  }
}

@layer components {
  .btn {
    @apply px-4 py-2 rounded-md font-medium transition-colors duration-200;
  }

  .btn-primary {
    @apply bg-primary text-white hover:bg-primary-dark;
  }

  .btn-secondary {
    @apply bg-secondary text-white hover:bg-secondary-dark;
  }

  .btn-danger {
    @apply bg-danger text-white hover:bg-danger-dark;
  }

  .btn-success {
    @apply bg-success text-white hover:bg-success-dark;
  }

  .btn-warning {
    @apply bg-warning text-white hover:bg-warning-dark;
  }

  .btn-info {
    @apply bg-info text-white hover:bg-info-dark;
  }

  .input {
    @apply w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent;
  }

  .card {
    @apply bg-white dark:bg-gray-800 rounded-lg shadow-md p-6;
  }
}

/* Global CSS styles */

/* Reset and base styles */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

/* Typography */
body {
  font-family: 'Roboto', 'Helvetica Neue', Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-size: 16px;
  line-height: 1.5;
}

/* Calendar specific custom styles */
.has-turn-day {
  position: relative;
}

.has-turn-day::after {
  content: '';
  position: absolute;
  bottom: 2px;
  left: 50%;
  transform: translateX(-50%);
  width: 8px;
  height: 8px;
  background-color: var(--primary-color);
  border-radius: 50%;
}

/* Animation classes */
.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.3s;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}

/* Utility classes */
.text-center {
  text-align: center;
}

.w-100 {
  width: 100%;
}

.h-100 {
  height: 100%;
}

.d-flex {
  display: flex;
}

.flex-column {
  flex-direction: column;
}

.align-center {
  align-items: center;
}

.justify-center {
  justify-content: center;
}

.justify-between {
  justify-content: space-between;
}

.justify-end {
  justify-content: flex-end;
}

.gap-2 {
  gap: 8px;
}

.gap-4 {
  gap: 16px;
}

.mb-2 {
  margin-bottom: 8px;
}

.mb-4 {
  margin-bottom: 16px;
}

.mt-2 {
  margin-top: 8px;
}

.mt-4 {
  margin-top: 16px;
}

.ml-2 {
  margin-left: 8px;
}

.mr-2 {
  margin-right: 8px;
}
</file>

<file path="src/components/EventEditModal.vue">
<template>
  <transition name="fade">
    <div v-if="isVisible" class="modal-overlay">
      <div class="modal-content">
        <div class="modal-header">
          <h3>Edit Event</h3>
          <button class="close-button" @click="$emit('close')">
            <span class="close-icon">✕</span>
          </button>
        </div>
        <form @submit.prevent="handleUpdate">
          <div class="form-group">
            <label for="start-date"><i class="icon-field fas fa-clock"></i>Day Start Date:</label>
            <input type="date" id="start-date" v-model="eventData.start" />
          </div>
          <div class="form-group">
            <label for="end-date"><i class="icon-field fas fa-clock"></i>Day End Date:</label>
            <input type="date" id="end-date" v-model="eventData.end" />
          </div>
          <div class="form-group">
            <label for="title"><i class="icon-field fas fa-home"></i>Select House:</label>
            <input type="text" id="title" v-model="eventData.title" />
          </div>
          <div class="form-group">
            <label for="turn"><i class="icon-field fas fa-clock"></i>Add Turn:</label>
            <div class="checkbox-container">
              <input type="checkbox" id="turn" v-model="eventData.turn" />
              <label for="turn" class="checkbox-label"><i class="icon-field fas fa-clock"></i>Enable turn</label>
            </div>
          </div>
          <div class="form-group">
            <label for="notes"><i class="icon-field fas fa-sticky-note"></i>Event Details:</label>
            <textarea id="notes" v-model="eventData.notes" rows="3"></textarea>
          </div>
          <div class="modal-actions">
            <button type="submit">Update</button>
          </div>
        </form>
      </div>
    </div>
  </transition>
</template>

<script setup lang="ts">
import { defineProps, defineEmits } from 'vue';

interface EventData {
  start: string;
  end: string;
  title: string;
  turn: boolean;
  notes: string;
}

const props = defineProps<{
  isVisible: boolean;
  eventData: EventData;
}>();

const emit = defineEmits<{
  (e: 'close'): void;
  (e: 'update', eventData: EventData): void;
}>();

const handleUpdate = () => {
  emit('update', props.eventData);
};
</script>

<style scoped>
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.modal-content {
  background: #f5f9fc;
  padding: 20px;
  border-radius: 8px;
  width: 400px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: flex;
  align-items: center;
  margin-bottom: 5px;
  font-weight: bold;
  color: #34495e;
}

.form-group input {
  width: 100%;
  padding: 8px;
  border: 1px solid #d1dde9;
  border-radius: 4px;
  background-color: white;
  transition: border-color 0.2s ease;
}

.form-group input:focus {
  outline: none;
  border-color: #66b8ca;
}

.form-group textarea {
  width: 100%;
  padding: 8px;
  border: 1px solid #d1dde9;
  border-radius: 4px;
  background-color: white;
  transition: border-color 0.2s ease;
  resize: vertical;
}

.form-group textarea:focus {
  outline: none;
  border-color: #66b8ca;
}

.modal-actions {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  margin-top: 20px;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
  padding-bottom: 10px;
  border-bottom: 1px solid #d1dde9;
  background-color: #e6eef5;
  margin: -20px -20px 15px -20px;
  padding: 15px 20px;
}

.close-button {
  background: white;
  border: 1px solid rgba(0, 0, 0, 0.12);
  border-radius: 50%;
  width: 22px;
  height: 22px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  padding: 0;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.close-icon {
  color: black;
  font-size: 12px;
  line-height: 1;
  font-weight: bold;
}

/* Button styling */
.modal-actions button {
  background-color: #66b8ca;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  transition: background-color 0.2s ease;
}

.modal-actions button:hover {
  background-color: #5e91c1;
}

/* Transition for modal */
.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.3s, transform 0.3s;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
  transform: scale(0.95);
}

/* Icon styling */
.icon-field {
  margin-right: 8px;
  color: #5e91c1;
  width: 16px;
  text-align: center;
}

/* Checkbox container styling */
.checkbox-container {
  display: flex;
  align-items: center;
  margin-top: 5px;
}

.checkbox-label {
  margin-left: 8px;
  font-weight: normal;
  cursor: pointer;
}

input[type="checkbox"] {
  cursor: pointer;
}
</style>
</file>

<file path="src/components/EventModal.vue">
<template>
  <v-dialog v-model="dialog" max-width="450px" content-class="event-modal-dialog" width="100%" :persistent="false"
    transition="fade-transition" origin="center center">
    <v-card class="event-modal-card">
      <div class="modal-glass-effect"></div>

      <!-- Header with gradient -->

      <v-card-text class="modal-content">
        <!-- House Selection -->
        <div class="input-group">
          <div class="d-flex align-center mb-1">
            <v-icon color="primary" size="20">mdi-home</v-icon>
            <span class="ml-2 input-label">House</span>
          </div>
          <div class="custom-select-container">
            <div class="custom-select-header" @click.stop="toggleHouseDropdown"
              :class="{ 'disabled': props.event, 'active': !props.event }">
              <div class="selected-house-display">
                <div v-if="selectedHouse" class="d-flex align-center">
                  <div class="rounded-circle me-2" :style="`background-color: ${selectedHouse.color || '#2979ff'
                    }; width: 16px; height: 16px;`"></div>
                  <span>{{ selectedHouse.address }}</span>
                </div>
                <span v-else class="placeholder-text">{{ props.event ? "No house associated" : "Click to select a house"
                }}</span>
              </div>
              <v-icon v-if="!props.event" color="primary">mdi-chevron-down</v-icon>
            </div>
            <div v-if="showHouseDropdown" class="custom-select-dropdown">
              <div v-for="house in uniqueHouses" :key="house.houseId" class="house-option"
                @click.stop="selectHouse(house)">
                <div class="d-flex align-center">
                  <div class="rounded-circle me-2" :style="`background-color: ${house.color || '#2979ff'
                    }; width: 16px; height: 16px;`"></div>
                  <span>{{ house.address }}</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Date Range -->
        <div class="date-range-container">
          <div class="input-group">
            <div class="d-flex align-center mb-1">

              <span class="ml-2 input-label text-medium-emphasis">Check-In</span>
            </div>

            <v-menu v-model="startDateMenu" :close-on-content-click="false" :nudge-right="40"
              transition="scale-transition" min-width="auto">
              <template v-slot:activator="{ props }">
                <v-text-field v-model="formattedStartDate" readonly variant="outlined" density="comfortable"
                  class="glass-input date-field" hide-details prepend-inner-icon="mdi-calendar-outline"
                  v-bind="props"></v-text-field>
              </template>
              <v-date-picker v-model="eventStartDate" @update:model-value="startDateMenu = false"
                color="primary"></v-date-picker>
            </v-menu>
          </div>

          <div class="input-group">
            <div class="d-flex align-center mb-1">

              <span class="ml-2 input-label">Check-Out</span>
            </div>

            <v-menu v-model="endDateMenu" :close-on-content-click="false" :nudge-right="40"
              transition="scale-transition" min-width="auto">
              <template v-slot:activator="{ props }">
                <v-text-field v-model="formattedEndDate" readonly variant="outlined" density="comfortable"
                  class="glass-input date-field" hide-details prepend-inner-icon="mdi-calendar-outline"
                  v-bind="props"></v-text-field>
              </template>
              <v-date-picker v-model="eventEndDate" @update:model-value="endDateMenu = false" color="primary"
                :min="eventStartDate"></v-date-picker>
            </v-menu>
          </div>
        </div>

        <!-- Turn Section -->
        <div class="input-group turn-section">
          <div class="d-flex align-center justify-space-between mb-2">
            <div class="d-flex align-center">
              <v-icon color="primary" size="20">mdi-clock-outline</v-icon>
              <span class="ml-2 input-label">Turn</span>
            </div>
            <v-switch v-model="turn" color="primary" hide-details density="compact"
              @update:model-value="handleTurnChange" class="ma-0 pa-0"></v-switch>
          </div>

          <div v-if="turn" class="turn-details mt-2">
            <div class="d-flex align-center mb-1">

              <span class="ml-2 input-label">Turn Date</span>
            </div>

            <v-menu v-model="turnDateMenu" :close-on-content-click="false" :nudge-right="40"
              transition="scale-transition" min-width="auto">
              <template v-slot:activator="{ props }">
                <v-text-field v-model="formattedTurnDate" readonly variant="outlined" density="comfortable"
                  class="glass-input date-field mb-2" hide-details prepend-inner-icon="mdi-calendar-outline"
                  placeholder="Select turn date" v-bind="props"></v-text-field>
              </template>
              <v-date-picker v-model="turndate" @update:model-value="turnDateMenu = false" color="primary"
                :min="eventStartDate" :max="eventEndDate"></v-date-picker>
            </v-menu>

            <div class="date-range-container">
              <div class="input-group">
                <div class="d-flex align-center mb-1">
                  <v-icon color="primary" size="20">mdi-clock-outline</v-icon>
                  <span class="ml-2 input-label">Check-in</span>
                </div>

                <v-text-field v-model="turncheckintime" readonly @click="openCheckInDialog" variant="outlined"
                  density="comfortable" class="glass-input time-field" placeholder="12:00 PM"
                  hide-details></v-text-field>
              </div>

              <div class="input-group">
                <div class="d-flex align-center mb-1">
                  <v-icon color="primary" size="20">mdi-clock-outline</v-icon>
                  <span class="ml-2 input-label">Check-out</span>
                </div>

                <v-text-field v-model="turncheckouttime" readonly @click="openCheckOutDialog" variant="outlined"
                  density="comfortable" class="glass-input time-field" placeholder="12:00 PM"
                  hide-details></v-text-field>
              </div>
            </div>
          </div>
        </div>

        <!-- Event Notes -->
        <div class="input-group">
          <div class="d-flex align-center mb-1">
            <v-icon color="primary" size="20">mdi-text-box-outline</v-icon>
            <span class="ml-2 input-label">Event Details</span>
          </div>

          <v-textarea v-model="eventnotes" variant="outlined" density="comfortable" rows="3" hide-details
            class="glass-input"></v-textarea>
        </div>
      </v-card-text>

      <v-card-actions class="modal-actions">
        <v-btn v-if="props.event" color="error" variant="outlined" @click="confirmDelete" class="delete-btn">
          <v-icon size="small" class="mr-1">mdi-delete</v-icon>
          Delete Event
        </v-btn>

        <v-spacer></v-spacer>

        <v-btn color="primary" variant="elevated" @click="saveEvent" class="save-btn">
          {{ props.event ? "Update Event" : "Create Event" }}
        </v-btn>
      </v-card-actions>
    </v-card>
  </v-dialog>

  <!-- Confirmation Dialog for Delete -->
  <v-dialog v-model="confirmDeleteDialog" max-width="400px" class="delete-dialog">
    <v-card class="delete-confirm-card">
      <v-card-title class="delete-dialog-title">
        <v-icon color="error" size="24" class="mr-2">mdi-alert-circle</v-icon>
        Confirm Delete
      </v-card-title>

      <v-card-text class="delete-dialog-text">
        Are you sure you want to delete this event? This action cannot be
        undone.
      </v-card-text>

      <v-card-actions class="delete-dialog-actions">
        <v-spacer></v-spacer>

        <v-btn color="grey" variant="text" @click="confirmDeleteDialog = false" class="cancel-btn">
          Cancel
        </v-btn>

        <v-btn color="error" variant="elevated" @click="deleteEvent" class="confirm-delete-btn">
          Delete
        </v-btn>
      </v-card-actions>
    </v-card>
  </v-dialog>

  <!-- Warning Dialog for Missing House -->
  <v-dialog v-model="houseWarningDialog" max-width="400px" class="warning-dialog">
    <v-card class="warning-confirm-card">
      <v-card-title class="warning-dialog-title">
        <v-icon color="warning" size="24" class="mr-2">mdi-alert</v-icon>
        House Required
      </v-card-title>

      <v-card-text class="warning-dialog-text">
        Please select a house to continue. Events must be associated with a house.
      </v-card-text>

      <v-card-actions class="warning-dialog-actions">
        <v-spacer></v-spacer>
        <v-btn color="primary" variant="elevated" @click="houseWarningDialog = false" class="confirm-btn">
          OK
        </v-btn>
      </v-card-actions>
    </v-card>
  </v-dialog>

  <!-- Warning Dialog for Date Selection -->
  <v-dialog v-model="dateWarningDialog" max-width="400px" class="warning-dialog">
    <v-card class="warning-confirm-card">
      <v-card-title class="warning-dialog-title">
        <v-icon color="warning" size="24" class="mr-2">mdi-alert</v-icon>
        Dates Required
      </v-card-title>

      <v-card-text class="warning-dialog-text">
        Please select both start and end dates for your event.
      </v-card-text>

      <v-card-actions class="warning-dialog-actions">
        <v-spacer></v-spacer>
        <v-btn color="primary" variant="elevated" @click="dateWarningDialog = false" class="confirm-btn">
          OK
        </v-btn>
      </v-card-actions>
    </v-card>
  </v-dialog>

  <!-- Warning Dialog for Invalid Turn Date -->
  <v-dialog v-model="turnDateWarningDialog" max-width="400px" class="warning-dialog">
    <v-card class="warning-confirm-card">
      <v-card-title class="warning-dialog-title">
        <v-icon color="warning" size="24" class="mr-2">mdi-alert</v-icon>
        Invalid Turn Date
      </v-card-title>

      <v-card-text class="warning-dialog-text">
        Turn date must be within the event date range.
      </v-card-text>

      <v-card-actions class="warning-dialog-actions">
        <v-spacer></v-spacer>
        <v-btn color="primary" variant="elevated" @click="turnDateWarningDialog = false" class="confirm-btn">
          OK
        </v-btn>
      </v-card-actions>
    </v-card>
  </v-dialog>

  <!-- Time Picker Components -->
  <TimePicker v-model="turncheckintime" v-model:isVisible="checkInTimeDialog" />
  <TimePicker v-model="turncheckouttime" v-model:isVisible="checkOutTimeDialog" />
</template>

<script setup lang="ts">
import { ref, defineProps, defineEmits, watch, computed, onMounted, nextTick, onBeforeUnmount } from "vue";
import TimePicker from "./TimePicker.vue";

interface House {
  userId: string;
  houseId: string;
  address: string;
  color: string;
  selected?: boolean;
  contactnumber?: string;
}

interface Event {
  id: string;
  title: string;
  start: string;
  end: string;
  extendedProps?: {
    color?: string;
    eventnotes?: string;
    turn?: boolean;
    turndate?: string;
    turncheckintime?: string;
    turncheckouttime?: string;
  };
}

const props = defineProps<{
  modelValue: boolean;
  event: Event | null;
  houses: House[];
  eventStartDate: string;
  eventEndDate: string;
}>();

const emit = defineEmits<{
  (e: 'close'): void;
  (e: 'create', eventData: Event): void;
  (e: 'update', eventData: Event): void;
  (e: 'delete'): void;
  (e: 'update:modelValue', value: boolean): void;
}>();

// State
const dialog = ref(false);
const selectedHouse = ref<House | null>(null);
const eventStartDate = ref(props.eventStartDate || new Date().toISOString().split("T")[0]);
const eventEndDate = ref(props.eventEndDate || new Date().toISOString().split("T")[0]);
const turn = ref(false);
const turndate = ref("");
const turncheckintime = ref("");
const turncheckouttime = ref("");
const eventnotes = ref("");
const confirmDeleteDialog = ref(false);
const houseWarningDialog = ref(false);
const dateWarningDialog = ref(false);
const turnDateWarningDialog = ref(false);

// Date picker menus
const startDateMenu = ref(false);
const endDateMenu = ref(false);
const turnDateMenu = ref(false);

// Time picker dialogs
const checkInTimeDialog = ref(false);
const checkOutTimeDialog = ref(false);

// Formatted dates for display
const formattedStartDate = computed(() => {
  if (!eventStartDate.value) return '';
  return formatDate(eventStartDate.value);
});

const formattedEndDate = computed(() => {
  if (!eventEndDate.value) return '';
  return formatDate(eventEndDate.value);
});

const formattedTurnDate = computed(() => {
  if (!turndate.value) return '';
  return formatDate(turndate.value);
});

// Date formatting function
function formatDate(dateString: string): string {
  if (!dateString) return '';
  try {
    const [year, month, day] = dateString.split('-');
    return `${month}/${day}/${year}`;
  } catch (e) {
    return dateString;
  }
}

// Add to script section
const showHouseDropdown = ref(false);

// Computed property to filter out duplicate houses
const uniqueHouses = computed(() => {
  // Use a Map to ensure uniqueness by houseId first, then by normalized address
  const uniqueMap = new Map<string, House>();

  props.houses.forEach((house) => {
    if (house && house.houseId && house.address) {
      // Only add if this houseId hasn't been seen before
      if (!uniqueMap.has(house.houseId)) {
        uniqueMap.set(house.houseId, house);
      }
    }
  });

  // Convert back to array and sort by address
  return Array.from(uniqueMap.values()).sort((a, b) =>
    a.address.localeCompare(b.address)
  );
});

// Watch for prop changes
watch(
  () => props.modelValue,
  (val) => {
    dialog.value = val;

    // If opening modal for new event (not editing), ensure house dropdown is highlighted
    if (val && !props.event) {
      // Use nextTick to wait for DOM to update
      nextTick(() => {
        const selectHeader = document.querySelector('.custom-select-header');
        if (selectHeader) {
          selectHeader.classList.add('active');
          // Use CSS animation instead of chained setTimeout
          selectHeader.classList.add('initial-highlight');
        }
      });
    }
  },
  { immediate: true }
);

// Watch dialog changes to emit update:modelValue events
watch(
  () => dialog.value,
  (val) => {
    emit("update:modelValue", val);
    if (!val) emit("close");
  }
);

// Watch for changes in the start date prop
watch(
  () => props.eventStartDate,
  (newDate) => {
    if (newDate && !props.event) {
      // Only update if we're creating a new event (not editing)
      eventStartDate.value = newDate;
      // Also set end date to the same date by default
      eventEndDate.value = newDate;
    }
  },
  { immediate: true }
);

// Watch for changes in the end date prop
watch(
  () => props.eventEndDate,
  (newDate) => {
    if (newDate && !props.event) {
      // Only update if we're creating a new event (not editing)
      eventEndDate.value = newDate;
    }
  },
  { immediate: true }
);

watch(
  () => props.event,
  (event) => {
    if (event) {
      loadEventData(event);
    }
  },
  { immediate: true }
);

// Methods
const loadEventData = (event) => {
  if (!event) return;

  // Set basic event properties
  selectedHouse.value =
    props.houses.find((h) => h.address === event.title) || null;

  // Parse dates
  const startDate = event.start ? new Date(event.start) : new Date();
  const endDate = event.end ? new Date(event.end) : new Date(startDate);

  // Format dates for form inputs (YYYY-MM-DD)
  eventStartDate.value = startDate.toISOString().split("T")[0];
  eventEndDate.value = endDate.toISOString().split("T")[0];

  // Set turn properties
  turn.value = event.extendedProps?.turn || false;
  turndate.value = event.extendedProps?.turndate || eventStartDate.value;
  turncheckintime.value = event.extendedProps?.turncheckintime || "";
  turncheckouttime.value = event.extendedProps?.turncheckouttime || "";

  // Set event notes
  eventnotes.value = event.extendedProps?.eventnotes || "";
};

const closeModal = () => {
  dialog.value = false;
  emit("update:modelValue", false);
  resetForm();
};

const resetForm = () => {
  selectedHouse.value = null;
  eventStartDate.value = new Date().toISOString().split("T")[0];
  eventEndDate.value = new Date().toISOString().split("T")[0];
  turn.value = false;
  turndate.value = "";
  turncheckintime.value = "";
  turncheckouttime.value = "";
  eventnotes.value = "";
};

const handleTurnChange = (val) => {
  if (val) {
    // Ensure turndate is set to start date if not already set
    if (!turndate.value) {
      turndate.value = eventStartDate.value;
    }

    // Set default times if not already set
    if (!turncheckintime.value) {
      turncheckintime.value = "12:00 PM";
    }

    if (!turncheckouttime.value) {
      turncheckouttime.value = "12:00 PM";
    }
  }
};

const toggleHouseDropdown = (e) => {
  // Don't toggle if in edit mode (has event)
  if (!props.event) {
    // Stop propagation to prevent document click from closing the dropdown immediately
    if (e) e.stopPropagation();

    showHouseDropdown.value = !showHouseDropdown.value;

    // If we're opening the dropdown, add highlight effect via CSS
    if (showHouseDropdown.value) {
      const selectHeader = document.querySelector('.custom-select-header');
      if (selectHeader) {
        selectHeader.classList.add('highlight-pulse');
      }
    }
  }
};

const selectHouse = (house, e) => {
  // Stop propagation to prevent document click handler
  if (e) e.stopPropagation();

  selectedHouse.value = house;
  showHouseDropdown.value = false;
};

// Close dropdown when clicking outside
onMounted(() => {
  const handleClickOutside = (e) => {
    const container = document.querySelector(".custom-select-container");
    const dropdown = document.querySelector(".custom-select-dropdown");

    // Only proceed if dropdown is open and click is outside the container and not on a house option
    if (
      showHouseDropdown.value &&
      container &&
      !container.contains(e.target) &&
      dropdown &&
      !dropdown.contains(e.target) &&
      !e.target.classList.contains('house-option')
    ) {
      showHouseDropdown.value = false;
    }
  };

  document.addEventListener("click", handleClickOutside);

  // Clean up event listener on component unmount
  onBeforeUnmount(() => {
    document.removeEventListener("click", handleClickOutside);
  });
});

const saveEvent = () => {
  // Validate form
  if (!selectedHouse.value) {
    houseWarningDialog.value = true;
    return;
  }

  // Validate dates
  if (!eventStartDate.value || !eventEndDate.value) {
    dateWarningDialog.value = true;
    return;
  }

  // Validate turn date is within the event date range
  if (turn.value && turndate.value) {
    if (
      turndate.value < eventStartDate.value ||
      turndate.value > eventEndDate.value
    ) {
      turnDateWarningDialog.value = true;
      return;
    }
  }

  // Add one day to end date to make it exclusive (required by FullCalendar)
  const endDate = new Date(eventEndDate.value);
  endDate.setDate(endDate.getDate() + 1);
  const exclusiveEndDate = endDate.toISOString().split('T')[0];

  // Create event object
  const eventData = {
    title: selectedHouse.value.address,
    start: `${eventStartDate.value}T00:00:00`,
    end: `${exclusiveEndDate}T00:00:00`, // Use exclusive end date for proper multi-day rendering
    allDay: true,
    address: selectedHouse.value.address,
    extendedProps: {
      color: selectedHouse.value.color || "#2979ff",
      eventnotes: eventnotes.value || "",
      turn: turn.value,
      turndate: turn.value ? turndate.value : null,
      turncheckintime: turn.value ? turncheckintime.value : null,
      turncheckouttime: turn.value ? turncheckouttime.value : null,
    },
  };

  // Emit the appropriate event based on whether we're editing or creating
  if (props.event) {
    emit("update", eventData);
  } else {
    emit("create", eventData);
  }

  closeModal();
};

const confirmDelete = () => {
  confirmDeleteDialog.value = true;
};

const deleteEvent = () => {
  emit("delete");
  confirmDeleteDialog.value = false;
  closeModal();
};

const openCheckInDialog = () => {
  checkInTimeDialog.value = true;
};

const openCheckOutDialog = () => {
  checkOutTimeDialog.value = true;
};

// Generate a colored dot for house selection
const getHouseColorDot = (item) => {
  if (!item || !item.color) return "";
  return `data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><circle cx="12" cy="12" r="10" fill="${encodeURIComponent(
    item.color
  )}"/></svg>`;
};
</script>

<style scoped>
.event-modal-dialog {
  margin: 16px;
  width: 100%;
}

.event-modal-card {
  border-radius: 24px;
  overflow: hidden;
  position: relative;
  background-color: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(12px);
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  width: 100%;
  max-width: 450px;
  margin: 0 auto;
}

.modal-glass-effect {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg,
      rgba(65, 105, 226, 0.05) 0%,
      rgba(255, 255, 255, 0.95) 100%);
  pointer-events: none;
  z-index: 0;
}

.modal-header {
  background: linear-gradient(135deg,
      var(--primary-color) 0%,
      var(--success-color) 100%);
  color: white;
  padding: 16px 20px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: relative;
  z-index: 1;
  box-shadow: 0 4px 15px rgba(65, 105, 226, 0.2);
}

.close-btn {
  background-color: rgba(255, 255, 255, 0.2) !important;
  backdrop-filter: blur(4px);
  margin-right: -8px;
}

.modal-content {
  padding: 20px;
  position: relative;
  z-index: 1;
  max-height: 70vh;
  overflow-y: auto;
}

.input-group {
  margin-bottom: 16px;
}

.input-label {
  font-size: 14px;
  font-weight: 00;
  color: rgba(0, 0, 0, 0.7);
}

.glass-input {
  background-color: rgba(255, 255, 255, 0.95) !important;
  backdrop-filter: blur(4px);
  border: 1px solid rgba(65, 105, 226, 0.12) !important;
  border-radius: 12px !important;
  transition: all 0.2s ease;
  margin-top: 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.04) !important;
}

.glass-input:hover {
  background-color: #ffffff !important;
  box-shadow: 0 2px 5px rgba(65, 105, 226, 0.06) !important;
  border: 1px solid rgba(65, 105, 226, 0.25) !important;
}

.time-field {
  cursor: pointer;
}

.time-field:hover {
  background-color: rgba(255, 255, 255, 0.9) !important;
}

.date-range-container {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 16px;
}

.turn-section {
  background-color: rgba(240, 245, 255, 0.6);
  backdrop-filter: blur(4px);
  border-radius: 16px;
  padding: 8px 12px;
  border: 1px solid rgba(65, 105, 226, 0.15);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.03);
}

.turn-details {
  padding-top: 6px;
  border-top: 1px solid rgba(65, 105, 226, 0.15);
}

.modal-actions {
  padding: 12px 20px 20px;
  position: relative;
  z-index: 1;
  display: flex;
  justify-content: space-between;
}

.delete-btn {
  border: 2px solid var(--error-color) !important;
  color: var(--error-color) !important;
  font-weight: 500;
  text-transform: none;
  letter-spacing: 0;
  transition: all 0.2s ease;
}

.delete-btn:hover {
  background-color: rgba(231, 50, 69, 0.1) !important;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(231, 50, 69, 0.2) !important;
}

.save-btn {
  border-radius: 10px;
  font-weight: 500;
  text-transform: none;
  letter-spacing: 0;
  padding: 0 20px;
  height: 40px;
  background: linear-gradient(135deg,
      var(--primary-color) 0%,
      var(--success-color) 100%) !important;
  box-shadow: 0 4px 15px rgba(65, 105, 226, 0.3) !important;
  transition: all 0.2s ease;
}

.save-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(65, 105, 226, 0.4) !important;
}

/* Mobile Responsiveness */
@media (max-width: 600px) {
  .date-range-container {
    grid-template-columns: 1fr;
    gap: 12px;
  }

  .event-modal-dialog {
    margin: 12px;
  }

  .modal-content {
    padding: 16px;
    max-height: 60vh;
  }

  .modal-actions {
    padding: 12px 16px 16px;
  }
}

/* Delete Confirmation Dialog Styles */
.delete-dialog :deep(.v-card) {
  border-radius: 16px;
  overflow: hidden;
}

.delete-confirm-card {
  background-color: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(12px);
}

.delete-dialog-title {
  padding: 20px;
  background-color: rgba(231, 50, 69, 0.1);
  color: var(--error-color);
  font-weight: 500;
  display: flex;
  align-items: center;
}

.delete-dialog-text {
  padding: 24px 20px;
  color: rgba(0, 0, 0, 0.7);
  font-size: 1rem;
  line-height: 1.5;
}

.delete-dialog-actions {
  padding: 12px 20px 20px;
}

.cancel-btn {
  text-transform: none;
  letter-spacing: 0;
  font-weight: 500;
  margin-right: 8px;
}

.confirm-delete-btn {
  background-color: var(--error-color) !important;
  color: white;
  text-transform: none;
  letter-spacing: 0;
  font-weight: 500;
  padding: 0 20px;
  height: 36px;
}

.confirm-delete-btn:hover {
  box-shadow: 0 4px 12px rgba(231, 50, 69, 0.3) !important;
  transform: translateY(-2px);
}

.custom-select-container {
  position: relative;
  width: 100%;
}

.custom-select-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 16px;
  background-color: rgba(250, 252, 255, 0.7);
  border: 1px solid rgba(65, 105, 226, 0.15);
  border-radius: 10px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.custom-select-header.active {
  border: 1px solid rgba(65, 105, 226, 0.5);
  background-color: rgba(240, 245, 255, 0.8);
  box-shadow: 0 2px 8px rgba(65, 105, 226, 0.1);
}

.custom-select-header.disabled {
  opacity: 0.6;
  cursor: not-allowed;
  background-color: rgba(245, 247, 250, 0.6);
}

.custom-select-header:not(.disabled):hover {
  background-color: rgba(240, 245, 255, 0.9);
  box-shadow: 0 4px 10px rgba(65, 105, 226, 0.15);
  border: 1px solid rgba(65, 105, 226, 0.5);
  transform: translateY(-1px);
}

.selected-house-display {
  flex: 1;
}

.placeholder-text {
  color: #4169e2;
  font-weight: 500;
}

.custom-select-dropdown {
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  background: rgba(255, 255, 255, 0.97);
  border-radius: 10px;
  box-shadow: 0 5px 15px rgba(65, 105, 226, 0.15);
  margin-top: 5px;
  z-index: 10;
  max-height: 200px;
  overflow-y: auto;
  border: 1px solid rgba(65, 105, 226, 0.3);
  animation: dropdownFade 0.2s ease-in-out;
}

@keyframes dropdownFade {
  from {
    opacity: 0;
    transform: translateY(-5px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Warning Dialog Styles */
.warning-dialog :deep(.v-card) {
  border-radius: 16px;
  overflow: hidden;
}

.warning-confirm-card {
  background-color: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(12px);
}

.warning-dialog-title {
  padding: 20px;
  background-color: rgba(65, 105, 226, 0.15);
  color: var(--primary-color);
  font-weight: 500;
  display: flex;
  align-items: center;
}

.warning-dialog-text {
  padding: 24px 20px;
  color: rgba(0, 0, 0, 0.7);
  font-size: 1rem;
  line-height: 1.5;
}

.warning-dialog-actions {
  padding: 12px 20px 20px;
}

.confirm-btn {
  background-color: var(--primary-color) !important;
  color: white;
  text-transform: none;
  letter-spacing: 0;
  font-weight: 500;
  padding: 0 20px;
  height: 36px;
}

.confirm-btn:hover {
  box-shadow: 0 4px 12px rgba(65, 105, 226, 0.3) !important;
  transform: translateY(-2px);
}

.highlight-pulse {
  animation: highlightPulse 1s ease-in-out;
  border-color: rgba(65, 105, 226, 0.8) !important;
}

.initial-highlight {
  animation: highlightPulse 1s ease-in-out;
  border-color: rgba(65, 105, 226, 0.8) !important;
}

/* Fade transition for dialog */
.fade-transition-enter-active,
.fade-transition-leave-active {
  transition: opacity 0.2s ease;
}

.fade-transition-enter-from,
.fade-transition-leave-to {
  opacity: 0;
}

.house-option {
  padding: 10px 16px;
  cursor: pointer;
  transition: background-color 0.2s;
  border-bottom: 1px solid rgba(65, 105, 226, 0.05);
}

.house-option:last-child {
  border-bottom: none;
}

.house-option:hover {
  background-color: rgba(65, 105, 226, 0.08);
}

@keyframes highlightPulse {
  0% {
    box-shadow: 0 0 0 0 rgba(65, 105, 226, 0.5);
  }

  70% {
    box-shadow: 0 0 0 10px rgba(65, 105, 226, 0);
  }

  100% {
    box-shadow: 0 0 0 0 rgba(65, 105, 226, 0);
  }
}

/* Added styles for date fields */
.date-field::-webkit-calendar-picker-indicator {
  display: none;
}

/* Update to more thorough approach to remove calendar icons */
.date-field {
  position: relative;
}

.date-field :deep(input[type="date"]) {
  position: relative;
}

.date-field :deep(input[type="date"])::-webkit-calendar-picker-indicator,
.date-field :deep(input[type="date"])::-webkit-inner-spin-button {
  display: none !important;
  -webkit-appearance: none !important;
  opacity: 0 !important;
  position: absolute;
  right: 0;
  pointer-events: none;
  z-index: -1;
}

.date-field :deep(input[type="date"])::-webkit-clear-button {
  display: none !important;
}

/* For Firefox */
.date-field :deep(input[type="date"]) {
  -moz-appearance: textfield;
  appearance: textfield;
}

.cursor-pointer {
  cursor: pointer;
}
</style>
</file>

<file path="src/components/FullCalendar.vue">
<!--Script---------->

<script setup lang="ts">
import FullCalendar from "@fullcalendar/vue3";
import dayGridPlugin from "@fullcalendar/daygrid";
import timeGridPlugin from "@fullcalendar/timegrid";
import interactionPlugin from "@fullcalendar/interaction";
import { auth } from "@/auth";
import { db } from "@/firebaseConfig";
import { useUserStore } from "@/stores/userStore";
import {
    collection,
    doc,
    updateDoc,
    query,
    where,
    getDocs,
} from "firebase/firestore";
import { onMounted, ref, onBeforeUnmount, watch, computed } from "vue";
import debounce from 'lodash/debounce';
import TimePicker from "@/components/ui/TimePicker.vue";
import { useTimeManagement } from "@/composables/useTimeManagement";
import type { CalendarEvent, CalendarProps, CalendarEmits, CalendarOptions, CalendarViewOption } from "@/types/calendar";

// Props and Emits
const props = defineProps<CalendarProps>();
const emit = defineEmits<CalendarEmits>();

// Refs
const isEventModalVisible = ref<boolean>(false);
const isEditMode = ref<boolean>(false);
const selectedEventId = ref<string | null>(null);
const selectedEvent = ref<CalendarEvent | null>(null);
const eventStartDate = ref<string>("");
const eventEndDate = ref<string>("");
const calendarRef = ref<InstanceType<typeof FullCalendar> | null>(null);
const calendarHeight = ref<number>(window.innerHeight - 20);
const selectedHouse = ref<any>(null);
const currentView = ref<string>('dayGridMonth');

// Store and composables
const userStore = useUserStore();
const {
    checkInTimeDialog,
    checkOutTimeDialog,
    turncheckintime,
    turncheckouttime,
    updateCheckInTime,
    updateCheckOutTime
} = useTimeManagement();

// Constants
const viewOptions: CalendarViewOption[] = [
    { title: 'Month', value: 'dayGridMonth' },
    { title: 'Week', value: 'timeGridWeek' },
    { title: 'Day', value: 'timeGridDay' }
];

const viewMap: Record<string, string> = {
    'month': 'dayGridMonth',
    'week': 'timeGridWeek',
    'day': 'timeGridDay'
};

// Watch for view changes
watch(() => props.view, (newView) => {
    if (newView && viewMap[newView]) {
        changeCalendarView(viewMap[newView]);
    }
});

// Methods
const changeCalendarView = (view: string): void => {
    if (calendarRef.value && calendarRef.value.getApi) {
        calendarRef.value.getApi().changeView(view);
        currentView.value = view;
    }
};

const handleResize = (): void => {
    calendarHeight.value = window.innerHeight - 20;
    if (calendarRef.value && calendarRef.value.getApi) {
        calendarRef.value.getApi().setOption('height', calendarHeight.value);
    }
};

const closeEventModal = (): void => {
    isEventModalVisible.value = false;
    isEditMode.value = false;
    selectedEvent.value = null;
    selectedEventId.value = null;
};

const fetchEvents = async (
    fetchInfo: any,
    successCallback: (events: CalendarEvent[]) => void,
    failureCallback: (error: Error) => void
): Promise<void> => {
    try {
        const q = query(
            collection(db, "events"),
            where("userId", "==", auth.currentUser.uid)
        );
        const querySnapshot = await getDocs(q);
        const events = querySnapshot.docs.map((doc) => ({
            id: doc.id,
            ...doc.data(),
        })) as CalendarEvent[];
        successCallback(events);
    } catch (error) {
        console.error("Error fetching events:", error);
        failureCallback(error as Error);
    }
};

const handleDateSelect = (selectInfo: any): void => {
    const selectedDate = selectInfo.startStr.split("T")[0];
    eventStartDate.value = selectedDate;
    eventEndDate.value = selectedDate;
    selectedEvent.value = null;

    emit('openEventModal', {
        startDate: selectedDate,
        endDate: selectedDate,
        event: null
    });
};

const editEvent = (clickInfo: any): void => {
    const event = clickInfo.event;
    selectedEventId.value = event.id;

    const eventData = event.toPlainObject({ collapseExtendedProps: true });
    selectedEvent.value = {
        id: event.id,
        title: event.title,
        start: event.startStr,
        end: event.endStr,
        ...eventData.extendedProps
    } as CalendarEvent;

    eventStartDate.value = formatDateForPicker(event.start);
    eventEndDate.value = event.end ? formatDateForPicker(event.end) : eventStartDate.value;

    emit('openEventModal', {
        startDate: eventStartDate.value,
        endDate: eventEndDate.value,
        event: selectedEvent.value
    });
};

const handleEventResize = async (eventResizeInfo: any): Promise<void> => {
    try {
        const { id, start, end } = eventResizeInfo.event;

        const updatedEvent = {
            start: start.toISOString(),
            end: end ? end.toISOString() : null,
        };

        const eventRef = doc(db, "events", id);
        await updateDoc(eventRef, updatedEvent);

        console.log(`Event ${id} resized successfully in Firestore.`);
    } catch (error) {
        console.error("Error resizing event in Firestore:", error);
    }
};

const handleEventDrop = async (eventDropInfo: any): Promise<void> => {
    try {
        const { id, start, end } = eventDropInfo.event;

        const updatedEvent = {
            start: start ? start.toISOString() : null,
            end: end ? end.toISOString() : null,
        };

        const eventRef = doc(db, "events", id);
        await updateDoc(eventRef, updatedEvent);

        console.log(`Event ${id} dropped successfully in Firestore.`);
    } catch (error) {
        console.error("Error updating event position in Firestore:", error);
        eventDropInfo.revert();
        alert("Failed to update event position. Please try again.");
    }
};

const refreshTurnDayHighlights = (): void => {
    const api = calendarRef.value?.getApi();
    if (!api) return;

    requestAnimationFrame(() => {
        const events = api.getEvents();
        const turnDates = events
            .filter(event => event.extendedProps?.turn === true && event.extendedProps?.turndate)
            .map(event => event.extendedProps.turndate);

        const turnDatesSet = new Set(turnDates);
        const cells = Array.from(document.querySelectorAll('.fc-daygrid-day'));
        const toAdd: Element[] = [];
        const toRemove: Element[] = [];

        cells.forEach(cell => {
            const cellDate = cell.getAttribute('data-date');
            const shouldHaveClass = cellDate ? turnDatesSet.has(cellDate) : false;
            const hasClass = cell.classList.contains('has-turn-day');

            if (shouldHaveClass && !hasClass) {
                toAdd.push(cell);
            } else if (!shouldHaveClass && hasClass) {
                toRemove.push(cell);
            }
        });

        if (toAdd.length > 0 || toRemove.length > 0) {
            requestAnimationFrame(() => {
                toAdd.forEach(cell => cell.classList.add('has-turn-day'));
                toRemove.forEach(cell => cell.classList.remove('has-turn-day'));
            });
        }
    });
};

const debouncedRefreshHighlights = debounce(() => {
    refreshTurnDayHighlights();
}, 200);

const goToPrev = (): void => {
    if (calendarRef.value?.getApi()) {
        calendarRef.value.getApi().prev();
    }
};

const goToNext = (): void => {
    if (calendarRef.value?.getApi()) {
        calendarRef.value.getApi().next();
    }
};

// Calendar options
const calendarOptions: CalendarOptions = {
    plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],
    headerToolbar: {
        left: "",
        center: "title",
        right: "",
    },
    initialView: "dayGridMonth",
    height: calendarHeight.value,
    eventDidMount: (info: { el: HTMLElement; event: { extendedProps: { color?: string } } }) => {
        info.el.style.setProperty('--event-color', info.event.extendedProps.color || '#2979ff');
        info.el.style.backgroundColor = info.event.extendedProps.color || '#2979ff';
        info.el.style.opacity = '1';
    },
    dayCellDidMount: (arg: { date: Date; el: HTMLElement }) => {
        const cellDate = arg.date.toISOString().split('T')[0];
        const api = calendarRef.value?.getApi();
        const events = api ? api.getEvents() : [];

        const hasTurnOnDay = events.some(event => {
            return event.extendedProps?.turn === true &&
                event.extendedProps?.turndate === cellDate;
        });

        if (hasTurnOnDay) {
            arg.el.classList.add('has-turn-day');
        }
    },
    datesSet: (dateInfo: { start: Date; end: Date }) => {
        if (calendarRef.value?.getApi()) {
            calendarRef.value.getApi().refetchEvents();
            debouncedRefreshHighlights();
        }
    },
    selectable: true,
    select: handleDateSelect,
    eventClick: editEvent,
    events: fetchEvents,
    eventResize: handleEventResize,
    editable: true,
    eventDrop: handleEventDrop,
    dayMaxEventRows: true,
    lazyFetching: true,
    rerenderDelay: 50,
};

// Lifecycle hooks
onMounted(() => {
    window.addEventListener('resize', handleResize);

    const checkCalendarReady = setInterval(() => {
        if (calendarRef.value?.getApi()) {
            clearInterval(checkCalendarReady);

            setTimeout(() => {
                refreshTurnDayHighlights();
            }, 300);
        }
    }, 100);

    handleResize();
});

onBeforeUnmount(() => {
    window.removeEventListener('resize', handleResize);
});

// Watch for selectedHouseId changes
watch(() => props.selectedHouseId, (newHouseId) => {
    if (newHouseId && userStore.userData?.houses) {
        const house = userStore.userData.houses.find((h: { houseId: string }) => h.houseId === newHouseId);
        if (house) {
            selectedHouse.value = house;
        }
    } else {
        selectedHouse.value = null;
    }
}, { immediate: true });

// Utility function for date formatting
const formatDateForPicker = (date: Date): string => {
    return date.toISOString().split('T')[0];
};

// Computed
const filteredViewOptions = computed<CalendarViewOption[]>(() => {
    return viewOptions;
});
</script>

<!--Template-------->

<template>
    <div class="calendar-container">
        <!-- Custom navigation controls -->
        <div class="calendar-navigation">
            <v-btn icon size="small" class="nav-button" @click="goToPrev">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none"
                    stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"
                    class="custom-icon">
                    <path fill="white" stroke="white" d="M15 4l-8 8 8 8"></path>
                </svg>
            </v-btn>
            <v-btn icon size="small" class="nav-button" @click="goToNext">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none"
                    stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"
                    class="custom-icon">
                    <path fill="white" stroke="white" d="M9 4l8 8-8 8"></path>
                </svg>
            </v-btn>
        </div>

        <FullCalendar class="full-calendar v-elevation-25" ref="calendarRef" :options="calendarOptions">
            <template v-slot:eventContent="arg">
                <div class="event-content">
                    <div class="event-content-inner">
                        <div class="event-title">{{ arg.event.title }}</div>
                        <div v-if="arg.event.extendedProps.turn" class="event-turn">
                            <v-icon size="small" color="white" class="turn-icon">mdi-refresh</v-icon>
                        </div>
                    </div>
                </div>
            </template>
        </FullCalendar>

        <TimePicker v-model="turncheckintime" v-model:isVisible="checkInTimeDialog" />
        <TimePicker v-model="turncheckouttime" v-model:isVisible="checkOutTimeDialog" />
    </div>
</template>

<!--Style----------->

<style>
/* Performance optimizations first */
.calendar-container {
    height: 100vh;
    contain: strict;
}

.full-calendar {
    content-visibility: auto;
    contain-intrinsic-size: 1000px;
}

:deep(.fc) {
    contain: content;
}

:deep(.fc-view-harness) {
    content-visibility: auto;
    contain-intrinsic-size: 800px;
}

/* Disable all Vuetify transitions globally */
.v-dialog-transition-enter-active,
.v-dialog-transition-leave-active,
.v-menu-transition-enter-active,
.v-menu-transition-leave-active,
.v-date-picker-transition-enter-active,
.v-date-picker-transition-leave-active,
.v-overlay-transition-enter-active,
.v-overlay-transition-leave-active {
    transition: none !important;
}

/* Disable all animations */
.v-enter-active,
.v-leave-active,
.v-enter-from,
.v-leave-to {
    transition: none !important;
    animation: none !important;
}

/* Force disable transitions on all elements */
* {
    transition: none !important;
    animation: none !important;
    transform: none !important;
}

/* Disable Vuetify menu animations */
.v-menu__content {
    transition: none !important;
    animation: none !important;
    transform: none !important;
}

/* Disable date picker animations */
.v-date-picker {
    transition: none !important;
    animation: none !important;
    transform: none !important;
}

/* Disable dialog animations */
.v-dialog {
    transition: none !important;
    animation: none !important;
    transform: none !important;
}

/* Disable overlay animations */
.v-overlay {
    transition: none !important;
    animation: none !important;
    transform: none !important;
}

/* Disable form field animations */
.v-field,
.v-field__field,
.v-field__input,
.v-field__outline,
.v-field__prepend-inner,
.v-field__append-inner {
    transition: none !important;
    animation: none !important;
    transform: none !important;
}

/* Disable checkbox animations */
.v-checkbox,
.v-selection-control,
.v-selection-control__input {
    transition: none !important;
    animation: none !important;
    transform: none !important;
}

/* Disable menu animations */
.v-menu,
.v-list,
.v-list-item {
    transition: none !important;
    animation: none !important;
    transform: none !important;
}

/* Disable calendar animations */
.fc-view-harness,
.fc-scrollgrid,
.fc-scroller,
.fc-scroller-liquid-absolute {
    transition: none !important;
    animation: none !important;
    transform: none !important;
}

/* Disable event animations */
.fc-event,
.fc-event-main,
.fc-event-time,
.fc-event-title {
    transition: none !important;
    animation: none !important;
    transform: none !important;
}

/* Remove all transform effects */
.v-overlay__content,
.v-dialog .v-card,
.v-field__field {
    transform: none !important;
}

/* Disable hardware acceleration */
.v-overlay__content,
.v-dialog .v-card,
.v-field__field,
.v-menu__content,
.v-date-picker {
    backface-visibility: visible !important;
    -webkit-backface-visibility: visible !important;
    will-change: auto !important;
}

/* Ensure no smooth scrolling */
.modal-content-bg {
    scroll-behavior: auto !important;
}

/* Remove all transition classes */
.dialog-fade-enter-active,
.dialog-fade-leave-active,
.dialog-fade-enter-from,
.dialog-fade-leave-to {
    transition: none !important;
    animation: none !important;
    transform: none !important;
}

/* Add these styles for calendar events */
:deep(.fc-event) {
    border: none !important;
    background-color: var(--event-color, var(--primary-color)) !important;
}

:deep(.fc-daygrid-event) {
    background-color: var(--event-color, var(--primary-color)) !important;
}

:deep(.fc-daygrid-event-harness) {
    color: inherit;
}

:deep(.fc-event-main) {
    color: white !important;
}

:deep(.fc-event-title) {
    color: white !important;
}

:deep(.fc-event-time) {
    display: none !important;
}

/* Update the event content styles */
.event-content {
    width: 100%;
}

.event-content-inner {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
}

.event-title {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    flex: 1;
    color: white !important;
    text-transform: uppercase;
}

/* Update the turn icon styles */
.event-turn {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgba(255, 255, 255, 0.2) !important;
}

.turn-icon {
    color: white !important;
}
</style>

<style scoped>
.calendar-header {
    background: linear-gradient(135deg, var(--primary-color) 0%, var(--success-color) 100%);
    color: white;
    padding: 0px;
    margin-bottom: 0px;
}

.calendar-controls {
    display: flex;
    gap: 12px;
    margin-bottom: 10px;
}

.calendar-btn {
    background: rgba(65, 105, 226, 0.1);
    border: 1px solid var(--primary-color);
    color: var(--primary-color);
    padding: 8px 16px;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.calendar-btn:hover {
    background: var(--primary-color);
    color: white;
}

.calendar-btn.active {
    background: var(--primary-color);
    color: white;
}

.event-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    margin-right: 4px;
}

.event-dot.primary {
    background-color: var(--primary-color);
}

.event-dot.secondary {
    background-color: var(--secondary-color);
}

.event-dot.accent {
    background-color: var(--accent-color);
}

.event-dot.error {
    background-color: var(--error-color);
}

.event-dot.success {
    background-color: var(--success-color);
}

.fc-event {
    border: none !important;
    background-color: var(--event-color, var(--primary-color)) !important;
}

.fc-event.primary {
    background-color: var(--primary-color) !important;
}

.fc-event.secondary {
    background-color: var(--secondary-color) !important;
}

.fc-event.accent {
    background-color: var(--accent-color) !important;
}

.fc-event.error {
    background-color: var(--error-color) !important;
}
</style>
</file>

<file path="src/components/Home.vue">
<!--Script---------->

<script setup lang="ts">
import { ref, onMounted, onBeforeUnmount } from "vue";
import { useRouter } from "vue-router";
import { useUserStore } from "@/stores/userStore";
import NavigationBar from "@/components/NavigationBar.vue";
import FullCalendar from "@/components/FullCalendar.vue";
import HouseModal from "@/components/HouseModal.vue";
import EventModal from "@/components/EventModal.vue";
import type { EventData, HomeProps, HomeEmits } from "@/types/home";

// Props and Emits
const props = defineProps<HomeProps>();
const emit = defineEmits<HomeEmits>();

const router = useRouter();
const userStore = useUserStore();
const showSidebar = ref<boolean>(false);
const isMobileView = ref<boolean>(window.innerWidth <= 768);
const sidebarPersistent = ref<boolean>(true);

/**
 * STATE ARCHITECTURE - Modal Management
 * 
 * Home.vue serves as the container component that manages all modal state.
 * Following Vue best practices:
 * 1. Only one instance of each modal exists in the application
 * 2. Parent component (Home) controls modal visibility state
 * 3. Child components emit events up, parent handles state changes
 * 4. Data flows down as props from parent to child components
 */
const showHouseModal = ref<boolean>(false);
const showEventModal = ref<boolean>(false);
const calendarView = ref<string>("month");

// Event modal state - managed at this level to ensure single source of truth
const selectedEvent = ref<EventData | undefined>(undefined);
const eventStartDate = ref<string>("");
const eventEndDate = ref<string>("");

const toggleSidebar = (): void => {
    showSidebar.value = !showSidebar.value;
};

const toggleSidebarPersistent = (): void => {
    sidebarPersistent.value = !sidebarPersistent.value;
};

/**
 * Event handlers for child component events
 * 
 * Following the events-up, props-down pattern:
 * - Child components emit events when user interacts with them
 * - Parent handles these events and updates state accordingly
 * - Updated state is passed back down as props
 */
const handleAddHouse = (): void => {
    showHouseModal.value = true;
};

const handleCreateEvent = (): void => {
    showEventModal.value = true;
};

// Handle changing calendar view (day, week, month)
const handleViewChange = (view: string): void => {
    calendarView.value = view;
};

// Handle calendar event modal opening from FullCalendar
const handleOpenEventModal = (data: { event: EventData; startDate: string; endDate: string }): void => {
    selectedEvent.value = data.event;
    eventStartDate.value = data.startDate;
    eventEndDate.value = data.endDate;
    showEventModal.value = true;
};

// Handle creating an event from the modal
const handleEventCreate = async (eventData: EventData): Promise<any> => {
    try {
        // Add user ID to the event data
        if (userStore.userData) {
            eventData.userId = userStore.userData.id;
        }

        // Call the store method to save event to the database
        const result = await userStore.createEvent(eventData);

        // Close the modal first for better perceived performance
        showEventModal.value = false;

        // Return the result in case it's needed
        return result;
    } catch (error) {
        console.error("Error creating event:", error);
        alert("Failed to create event. Please try again.");
        throw error;
    }
};

// Handle event updates from FullCalendar through EventModal
const handleEventUpdate = async (eventData: EventData): Promise<void> => {
    try {
        // Update event in Firestore through userStore
        await userStore.updateEvent(eventData);
        showEventModal.value = false;
    } catch (error) {
        console.error("Error updating event:", error);
        alert("Failed to update event. Please try again.");
    }
};

// Handle event deletion from FullCalendar through EventModal
const handleEventDelete = async (eventId: string): Promise<void> => {
    try {
        // Delete event in Firestore through userStore
        await userStore.deleteEvent(eventId);
        showEventModal.value = false;
    } catch (error) {
        console.error("Error deleting event:", error);
        alert("Failed to delete event. Please try again.");
    }
};

// Handle window resize to detect mobile view
const handleResize = (): void => {
    isMobileView.value = window.innerWidth <= 768;
};

onMounted(() => {
    userStore.initAuthListener();
    window.addEventListener("resize", handleResize);
});

onBeforeUnmount(() => {
    window.removeEventListener("resize", handleResize);
});
</script>

<!--Template----------->

<template>
    <div v-if="userStore.userData" class="app-background">
        <div class="home-container">
            <!-- NavigationBar emits events up to this parent -->
            <NavigationBar :class="{ show: showSidebar, 'mobile-view': isMobileView }" :persistent="sidebarPersistent"
                @toggle-persistent="toggleSidebarPersistent" @add-house="handleAddHouse"
                @create-event="handleCreateEvent" @logout="userStore.logout" @change-view="handleViewChange" />

            <div class="main-content" :class="{ 'sidebar-visible': showSidebar }">
                <!-- FullCalendar emits events up to this parent -->
                <FullCalendar :user-id="userStore.userData?.id" :view="calendarView"
                    @open-event-modal="handleOpenEventModal" @create-event="handleEventCreate"
                    @update-event="handleEventUpdate" @delete-event="handleEventDelete" />
            </div>

            <!-- Modal components managed at parent level -->
            <!-- Single source of truth for HouseModal -->
            <HouseModal v-model="showHouseModal" @close="showHouseModal = false" />

            <!-- Single source of truth for EventModal -->
            <EventModal v-model="showEventModal" @close="showEventModal = false" @create="handleEventCreate"
                :houses="userStore.userData?.houses || []" :event="selectedEvent" :event-start-date="eventStartDate"
                :event-end-date="eventEndDate" />
        </div>
    </div>
    <div v-else>
        <div class="loader"></div>
    </div>
</template>

<!--Style----------->
<style scoped>
.app-background {
    min-height: 100vh;
    width: 100%;
}

.home-container {
    display: flex;
    height: 100vh;
    width: 100%;
    position: relative;
    background-color: #b7bfd5;
}

.main-content {
    flex: 1;
    position: relative;
    transform: translateX(0);
    transition: transform 0.3s ease;
    will-change: transform;
}

.main-content.sidebar-visible {
    transform: translateX(310px);
}

.calendar-wrapper {
    flex: 1;
    height: 100%;
    overflow: hidden;
}

#logout {
    height: 30px;
}

/* Sidebar is hidden by default on all screen sizes */
.sidebar-hidden {
    position: fixed;
    transform: translateX(0);
    transition: transform 0.3s ease;
    z-index: 20;
    height: 100vh;
    will-change: transform;
}

/* Sidebar becomes visible when .show class is applied */
.sidebar-hidden.show {
    transform: translateX(0);
}

/* Ensure consistent behavior at all screen sizes */
@media (max-width: 768px) {
    .home-container {
        padding-left: 0;
    }

    /* Make sidebar cover whole screen in mobile */
    .main-content.sidebar-visible {
        transform: translateX(0);
        opacity: 0.3;
        pointer-events: none;
    }
}

.loader {
    border: 5px solid #f3f3f3;
    border-top: 5px solid #36b5f4;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    animation: spin 1s linear infinite;
    margin: 20px auto;
}

@keyframes spin {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}
</style>
</file>

<file path="src/components/HouseModal.vue">
<!--Script---------->

<script setup lang="ts">
import { ref, watch } from "vue";
import { useUserStore } from "@/stores/userStore";
import type { House, HouseModalProps, HouseModalEmits } from "@/types/house";

// Props and Emits
const props = defineProps<HouseModalProps>();
const emit = defineEmits<HouseModalEmits>();

const userStore = useUserStore();
const houseName = ref<string>("");
const houseAddress = ref<string>("");
const isSubmitting = ref<boolean>(false);
const errorMessage = ref<string>("");

// Watch for modelValue changes to reset form
watch(() => props.modelValue, (newValue) => {
    if (!newValue) {
        resetForm();
    }
});

const resetForm = (): void => {
    houseName.value = "";
    houseAddress.value = "";
    errorMessage.value = "";
};

const validateForm = (): boolean => {
    if (!houseName.value.trim()) {
        errorMessage.value = "House name is required";
        return false;
    }
    if (!houseAddress.value.trim()) {
        errorMessage.value = "House address is required";
        return false;
    }
    return true;
};

const handleSubmit = async (): Promise<void> => {
    if (!validateForm()) return;

    isSubmitting.value = true;
    errorMessage.value = "";

    try {
        const newHouse: Omit<House, 'id' | 'createdAt' | 'updatedAt'> = {
            name: houseName.value.trim(),
            address: houseAddress.value.trim(),
            userId: userStore.userData?.id || ""
        };

        await userStore.createHouse(newHouse);
        emit('update:modelValue', false);
        resetForm();
    } catch (error) {
        console.error("Error creating house:", error);
        errorMessage.value = "Failed to create house. Please try again.";
    } finally {
        isSubmitting.value = false;
    }
};

const handleClose = (): void => {
    emit('close');
    resetForm();
};
</script>

<!--Template----------->

<template>
    <div v-if="modelValue" class="modal-overlay" @click="handleClose">
        <div class="modal-content" @click.stop>
            <div class="modal-header">
                <h2>Add New House</h2>
                <button class="close-button" @click="handleClose">&times;</button>
            </div>

            <form @submit.prevent="handleSubmit" class="modal-form">
                <div class="form-group">
                    <label for="houseName">House Name</label>
                    <input id="houseName" v-model="houseName" type="text" placeholder="Enter house name"
                        :disabled="isSubmitting" />
                </div>

                <div class="form-group">
                    <label for="houseAddress">Address</label>
                    <input id="houseAddress" v-model="houseAddress" type="text" placeholder="Enter house address"
                        :disabled="isSubmitting" />
                </div>

                <div v-if="errorMessage" class="error-message">
                    {{ errorMessage }}
                </div>

                <div class="modal-footer">
                    <button type="button" class="cancel-button" @click="handleClose" :disabled="isSubmitting">
                        Cancel
                    </button>
                    <button type="submit" class="submit-button" :disabled="isSubmitting">
                        {{ isSubmitting ? "Creating..." : "Create House" }}
                    </button>
                </div>
            </form>
        </div>
    </div>
</template>

<!--Style----------->
<style scoped>
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background-color: white;
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
    padding: 20px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.modal-header h2 {
    margin: 0;
    color: #333;
}

.close-button {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #666;
}

.modal-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.form-group {
    display: flex;
    flex-direction: column;
    gap: 5px;
}

.form-group label {
    font-weight: 500;
    color: #444;
}

.form-group input {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
}

.form-group input:focus {
    outline: none;
    border-color: #36b5f4;
}

.error-message {
    color: #e74c3c;
    font-size: 14px;
    margin-top: 5px;
}

.modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 20px;
}

.cancel-button,
.submit-button {
    padding: 8px 16px;
    border-radius: 4px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s;
}

.cancel-button {
    background-color: #f5f5f5;
    border: 1px solid #ddd;
    color: #666;
}

.cancel-button:hover {
    background-color: #e5e5e5;
}

.submit-button {
    background-color: #36b5f4;
    border: none;
    color: white;
}

.submit-button:hover {
    background-color: #2a9cd8;
}

.submit-button:disabled {
    background-color: #a0d4f0;
    cursor: not-allowed;
}
</style>
</file>

<file path="src/components/NavigationBar.vue">
<template>
    <div class="navigation-wrapper">
        <v-navigation-drawer v-model="drawer" :rail="rail" @mouseenter="rail = false" @mouseleave="handleMouseLeave"
            :permanent="!isMobile" :temporary="isMobile" :location="location" width="300" class="calendar-sidebar"
            rounded="lg" elevation="4">
            <!-- User Profile Section -->
            <div class="userprofile pa-3">
                <v-avatar size="56" color="primary" class="elevation-2 mb-2" v-if="!rail || isMobile">
                    <span class="text-h6 font-weight-medium">{{ userInitials }}</span>
                </v-avatar>
                <v-avatar size="36" color="primary" class="elevation-2 mb-2" v-else>
                    <span class="text-subtitle-2 font-weight-medium">{{ userInitials }}</span>
                </v-avatar>

                <div v-if="!rail || isMobile" class="user-info mt-1">
                    <div class="text-h6">{{ user.name }}</div>
                    <div class="text-body-2 text-medium-emphasis">{{ user.email }}</div>
                </div>
            </div>

            <v-divider class="mb-1"></v-divider>

            <!-- Calendar Controls -->
            <div class="calendar-controls pa-2" v-if="!rail || isMobile">
                <v-btn block color="primary" prepend-icon="mdi-plus" class="mb-2 create-event-btn" elevation="1"
                    @click="createEvent">
                    Create Event
                </v-btn>

                <v-menu v-model="dateMenu" :close-on-content-click="false" location="bottom"
                    transition="scale-transition">
                    <template v-slot:activator="{ props }">
                        <v-btn block variant="outlined" class="mb-2 date-picker-btn" prepend-icon="mdi-calendar"
                            v-bind="props">
                            {{ formattedCurrentDate }}
                        </v-btn>
                    </template>
                    <v-date-picker v-model="currentDate" @update:model-value="dateMenu = false"></v-date-picker>
                </v-menu>
            </div>

            <div class="calendar-controls-rail pa-2" v-else>
                <v-btn icon color="primary" size="small" class="mb-2" @click="createEvent">
                    <v-icon>mdi-plus</v-icon>
                </v-btn>

                <v-btn icon variant="outlined" size="small" class="mb-2" @click="dateMenu = true">
                    <v-icon>mdi-calendar</v-icon>
                </v-btn>
            </div>

            <v-divider class="my-1"></v-divider>

            <!-- Houses Section -->
            <div class="houses-section pa-2">
                <div class="d-flex align-center justify-space-between mb-2">
                    <v-btn icon variant="text" density="comfortable" color="primary">
                        <v-icon>mdi-home</v-icon>
                    </v-btn>
                    <div class="text-subtitle-1 font-weight-medium flex-grow-1">My Houses</div>
                    <v-btn icon variant="text" density="comfortable" color="primary" @click="addHouse">
                        <v-icon>mdi-plus</v-icon>
                    </v-btn>
                </div>

                <div v-if="displayedHouses.length === 0" class="text-center py-2 text-body-2 text-grey">
                    <v-icon icon="mdi-home-outline" size="large" color="grey" class="mb-1"></v-icon>
                    <div>No houses added yet</div>
                </div>

                <v-slide-y-transition group>
                    <v-card v-for="house in displayedHouses" :key="house.houseId"
                        :class="`text-${getColorClass(house.color)}`" class="house-card mb-1" variant="outlined"
                        :ripple="false" @click="toggleHouseSelection(house)">
                        <div class="d-flex align-center house-item">
                            <v-checkbox v-model="house.selected" hide-details density="compact"
                                @click.stop="toggleHouseSelection(house)"></v-checkbox>
                            <span class="ml-2 text-body-2 house-name">{{ house.address }}</span>
                            <v-spacer></v-spacer>
                            <v-btn icon variant="text" size="x-small" @click.stop="confirmDelete(house)"
                                class="remove-btn">
                                <v-icon size="small">mdi-close</v-icon>
                            </v-btn>
                        </div>
                    </v-card>
                </v-slide-y-transition>
            </div>

            <!-- View Options -->
            <div class="view-options pa-2" v-if="!rail || isMobile">
                <v-btn-group variant="outlined" divided class="w-100 view-btn-group d-flex justify-center">
                    <v-btn v-for="view in viewOptions" :key="view.value" :value="view.value"
                        :active="currentView === view.value" @click="currentView = view.value" class="flex-1 view-btn">
                        {{ view.label }}
                    </v-btn>
                </v-btn-group>
            </div>
            <v-divider class="my-1"></v-divider>
            <v-list density="compact">
                <v-list-item router-link to="/userprofile">
                    <template v-slot:prepend>
                        <v-icon size="small">mdi-account-edit</v-icon>
                    </template>
                    <v-list-item-title>Profile Settings</v-list-item-title>
                </v-list-item>
                <v-divider class="my-1"></v-divider>
                <v-list-item @click="userStore.logout">
                    <template v-slot:prepend>
                        <v-icon size="small">mdi-logout</v-icon>
                    </template>
                    <v-list-item-title>Logout</v-list-item-title>
                </v-list-item>
            </v-list>
            <v-divider class="my-1"></v-divider>

            <template v-slot:append>
                <div class="pa-2">
                    <v-btn v-if="!isMobile" block variant="tonal" @click="rail = rail"
                        :prepend-icon="rail ? 'mdi-chevron-right' : 'mdi-chevron-left'">
                        {{ rail ? '' : 'Collapse' }}
                    </v-btn>
                    <v-btn v-if="!isMobile && !rail" block variant="outlined" class="mt-2"
                        @click="$emit('toggle-persistent')">
                        {{ persistent ? 'Auto-collapse' : 'Keep expanded' }}
                    </v-btn>
                </div>
            </template>
        </v-navigation-drawer>

        <!-- Confirmation Dialog for Delete -->
        <v-dialog v-model="confirmDeleteDialog" max-width="400px" class="delete-dialog">
            <v-card class="delete-confirm-card">
                <v-card-title class="delete-dialog-title">
                    <v-icon color="error" size="24" class="mr-2">mdi-alert-circle</v-icon>
                    Confirm Delete
                </v-card-title>

                <v-card-text class="delete-dialog-text">
                    Are you sure you want to delete <strong>{{ houseToDelete?.address }}</strong>? This action cannot be
                    undone.
                </v-card-text>

                <v-card-actions class="delete-dialog-actions">
                    <v-spacer></v-spacer>

                    <v-btn color="grey" variant="text" @click="confirmDeleteDialog = false" class="cancel-btn">
                        Cancel
                    </v-btn>

                    <v-btn color="error" variant="elevated" @click="deleteHouse" class="confirm-delete-btn">
                        Delete
                    </v-btn>
                </v-card-actions>
            </v-card>
        </v-dialog>
    </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted, watch } from 'vue';
import { format } from 'date-fns';
import { useUserStore } from '../stores/userStore.ts';
import { auth } from "../auth";

interface House {
    userId: string;
    houseId: string;
    address: string;
    color: string;
    selected?: boolean;
    contactnumber?: string;
}

interface ViewOption {
    label: string;
    value: string;
}

// Props
const props = defineProps<{
    location?: string;
    persistent?: boolean;
}>();

// Store
const userStore = useUserStore();

// Emits
const emit = defineEmits<{
    (e: 'create-event'): void;
    (e: 'add-house'): void;
    (e: 'remove-house'): void;
    (e: 'toggle-house', house: House): void;
    (e: 'change-view', view: string): void;
    (e: 'change-date', date: string): void;
    (e: 'toggle-persistent'): void;
}>();

// State
const drawer = ref(true);
const rail = ref(false);
const isMobile = ref(false);
const dateMenu = ref(false);
const currentDate = ref(new Date().toISOString().substr(0, 10));
const currentView = ref('month');
const confirmDeleteDialog = ref(false);
const houseToDelete = ref<House | null>(null);

// User data
const user = computed(() => {
    return {
        name: userStore.userData?.fullName || 'User',
        email: userStore.userData?.email || ''
    };
});

// View options
const viewOptions: ViewOption[] = [
    { label: 'Day', value: 'day' },
    { label: 'Week', value: 'week' },
    { label: 'Month', value: 'month' }
];

// Map house colors to Vuetify color classes
const colorMap: Record<string, string> = {
    '#66b8ca': 'blue',
    '#4169e2': 'indigo',
    '#8656c3': 'purple',
    '#e5564e': 'red',
    '#F4C530': 'amber',
    '#3CB371': 'green',
    '#FF7F50': 'deep-orange',
    '#6A5ACD': 'deep-purple',
    '#20B2AA': 'teal',
    '#FF69B4': 'pink'
};

// Get appropriate color class from hex color
const getColorClass = (hexColor: string | undefined): string => {
    if (!hexColor) return 'primary';
    return colorMap[hexColor] || 'primary';
};

// Computed property to display houses from userStore
const displayedHouses = computed(() => {
    // Get houses directly from userStore
    const houses = userStore.userData?.houses || [];

    // Make sure all houses have a selected property
    return houses.map(house => ({
        ...house,
        selected: typeof house.selected === 'boolean' ? house.selected : true
    }));
});

// Computed
const userInitials = computed(() => {
    return user.value.name
        .split(' ')
        .map(name => name[0])
        .join('');
});

const formattedCurrentDate = computed(() => {
    try {
        return format(new Date(currentDate.value), 'MMMM d, yyyy');
    } catch (e) {
        return currentDate.value;
    }
});

// Methods
const handleMouseLeave = () => {
    if (!props.persistent) {
        rail.value = !isMobile.value;
    }
};

const createEvent = () => {
    emit('create-event');
};

/**
 * EVENT EMISSION PATTERN
 * 
 * Instead of directly managing modals, this component now follows Vue best practices:
 * 1. Child components emit events UP to the parent (Home.vue)
 * 2. Home.vue handles these events and manages state
 * 3. This avoids duplicate modals and ensures single source of truth
 */
const addHouse = () => {
    // Emit event to parent instead of showing modal directly
    emit('add-house');
};

const confirmDelete = (house: House) => {
    houseToDelete.value = house;
    confirmDeleteDialog.value = true;
};

const deleteHouse = async () => {
    try {
        const house = houseToDelete.value;
        if (!house) return;

        await userStore.deleteHouse(house);
        console.log("House deleted, refreshing data");

        // Close the dialog
        confirmDeleteDialog.value = false;
        houseToDelete.value = null;
    } catch (error) {
        console.error("Error deleting house:", error);
        alert("Failed to delete house. Please try again.");
    }
};

const toggleHouseSelection = (house: House) => {
    house.selected = !house.selected;
    emit('toggle-house', house);
};

// Watch for changes
watch(currentView, (newView) => {
    emit('change-view', newView);
});

watch(currentDate, (newDate) => {
    emit('change-date', newDate);
});

// Check for mobile on mount and resize
const checkMobile = () => {
    isMobile.value = window.innerWidth < 960;
    if (isMobile.value) {
        rail.value = false;
        drawer.value = false;
    } else {
        drawer.value = true;
    }
};

onMounted(async () => {
    checkMobile();
    window.addEventListener('resize', checkMobile);
});
</script>

<style scoped>
.navigation-wrapper {
    height: 100%;
    position: relative;
}

.calendar-sidebar {
    border-right: 1px solid rgba(var(--v-theme-on-surface), 0.08);
}

.userprofile {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
}

.houses-section {
    width: 100%;
    max-height: 45vh;
    overflow-y: auto;
}

.house-card {
    transition: all 0.2s ease;
    border-radius: 8px;
    margin-bottom: 6px !important;
    width: 100%;
    box-shadow: 5px 2px 2px rgba(0, 0, 0, 0.103) !important;
}

.house-item {
    padding: 3px 8px !important;
    width: 100%;
}

.house-name {
    font-weight: 600;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    max-width: 170px;
}

.house-card:hover {
    transform: translateY(-1px);
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
}

.house-card .remove-btn {
    opacity: 0;
    transition: opacity 0.2s ease;
}

.house-card:hover .remove-btn {
    opacity: 1;
}

.create-event-btn {
    transition: transform 0.2s ease;
}

.create-event-btn:hover {
    transform: translateY(-2px);
}

.date-picker-btn {
    transition: background-color 0.2s ease;
}

/* Ensure proper spacing in rail mode */
.v-navigation-drawer--rail .calendar-controls-rail {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.view-btn-group {
    height: auto !important;
}

.view-btn {
    min-height: 40px !important;
    padding: 0 12px !important;
    font-size: 1.1rem !important;
    font-weight: 500 !important;
}

/* Delete Confirmation Dialog Styles */
.delete-dialog :deep(.v-card) {
    border-radius: 16px;
    overflow: hidden;
}

.delete-confirm-card {
    background-color: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(12px);
}

.delete-dialog-title {
    padding: 20px;
    background-color: rgba(231, 50, 69, 0.1);
    color: var(--error-color);
    font-weight: 500;
    display: flex;
    align-items: center;
}

.delete-dialog-text {
    padding: 24px 20px;
    color: rgba(0, 0, 0, 0.7);
    font-size: 1rem;
    line-height: 1.5;
}

.delete-dialog-actions {
    padding: 12px 20px 20px;
}

.cancel-btn {
    text-transform: none;
    letter-spacing: 0;
    font-weight: 500;
    margin-right: 8px;
}

.confirm-delete-btn {
    background-color: var(--error-color) !important;
    color: white;
    text-transform: none;
    letter-spacing: 0;
    font-weight: 500;
    padding: 0 20px;
    height: 36px;
}

.confirm-delete-btn:hover {
    box-shadow: 0 4px 12px rgba(231, 50, 69, 0.3) !important;
    transform: translateY(-2px);
}
</style>
</file>

<file path="src/components/Playground.vue">
<template>
    <v-dialog v-model="dialog" max-width="450px" content-class="event-modal-dialog" width="100%">
        <v-card class="event-modal-card">
            <div class="modal-glass-effect"></div>

            <!-- Header with gradient -->
            <v-card-title class="modal-header">
                <div class="d-flex align-center">
                    <v-icon color="white" class="mr-2">mdi-calendar-edit</v-icon>
                    <span>{{ isEditing ? 'Edit Event' : 'Create New Event' }}</span>
                </div>
                <v-btn icon small @click="closeModal" class="close-btn">
                    <v-icon>mdi-close</v-icon>
                </v-btn>
            </v-card-title>

            <v-card-text class="modal-content">
                <!-- House Selection -->
                <div class="input-group">
                    <div class="d-flex align-center mb-1">
                        <v-icon color="primary" size="20">mdi-home</v-icon>
                        <span class="ml-2 input-label">House</span>
                    </div>
                    <v-menu v-model="houseMenuOpen" :close-on-content-click="true" location="bottom" :z-index="9999"
                        transition="none" open-on-click>
                        <template v-slot:activator="{ props }">
                            <v-text-field v-model="selectedHouseDisplay" readonly outlined dense hide-details
                                class="glass-input" :loading="userStore.isLoading" :disabled="userStore.isLoading"
                                v-bind="props" append-icon="mdi-menu-down"
                                @click="console.log('Houses:', houses.value)"></v-text-field>
                        </template>
                        <v-card class="house-menu pa-2">
                            <v-list v-if="houses.length > 0">
                                <v-list-item v-for="house in houses" :key="house.houseId"
                                    @click="selectHouseItem(house)" class="house-item" color="primary">
                                    <v-list-item-title>{{ house.address }}</v-list-item-title>
                                    <v-list-item-subtitle class="text-caption">
                                        <div class="d-flex align-center">
                                            <div class="color-dot mr-2" :style="{ backgroundColor: house.color }"></div>
                                            {{ house.color }}
                                        </div>
                                    </v-list-item-subtitle>
                                </v-list-item>
                            </v-list>
                            <div v-else class="pa-4 text-center text-subtitle-1 text-grey">
                                No houses available
                            </div>
                        </v-card>
                    </v-menu>
                </div>

                <!-- Date Range -->
                <div class="date-range-container">
                    <div class="input-group">
                        <div class="d-flex align-center mb-1">
                            <v-icon color="primary" size="20">mdi-calendar-start</v-icon>
                            <span class="ml-2 input-label">Start Date</span>
                        </div>
                        <v-menu v-model="startDateMenu" :close-on-content-click="false" transition="scale-transition"
                            offset-y min-width="290px">
                            <template v-slot:activator="{ props }">
                                <v-text-field v-model="startDate" readonly outlined dense hide-details
                                    class="glass-input" v-bind="props"></v-text-field>
                            </template>
                            <v-date-picker v-model="startDate" color="primary"
                                @update:model-value="startDateMenu = false"></v-date-picker>
                        </v-menu>
                    </div>

                    <div class="input-group">
                        <div class="d-flex align-center mb-1">
                            <v-icon color="primary" size="20">mdi-calendar-end</v-icon>
                            <span class="ml-2 input-label">End Date</span>
                        </div>
                        <v-menu v-model="endDateMenu" :close-on-content-click="false" transition="scale-transition"
                            offset-y min-width="290px">
                            <template v-slot:activator="{ props }">
                                <v-text-field v-model="endDate" readonly outlined dense hide-details class="glass-input"
                                    v-bind="props"></v-text-field>
                            </template>
                            <v-date-picker v-model="endDate" color="primary"
                                @update:model-value="endDateMenu = false"></v-date-picker>
                        </v-menu>
                    </div>
                </div>

                <!-- Event Details -->
                <div class="input-group">
                    <div class="d-flex align-center mb-1">
                        <v-icon color="primary" size="20">mdi-text-box</v-icon>
                        <span class="ml-2 input-label">Event Details</span>
                    </div>
                    <v-textarea v-model="eventDetails" outlined dense hide-details rows="3"
                        class="glass-input"></v-textarea>
                </div>

                <!-- Color Selection -->
                <div class="input-group">
                    <div class="d-flex align-center mb-1">
                        <v-icon color="primary" size="20">mdi-palette</v-icon>
                        <span class="ml-2 input-label">Event Color</span>
                    </div>
                    <div class="color-picker-container">
                        <div v-for="color in eventColors" :key="color" class="color-option"
                            :class="{ 'selected': selectedColor === color }" :style="{ backgroundColor: color }"
                            @click="selectedColor = color"></div>
                    </div>
                </div>
            </v-card-text>

            <v-card-actions class="modal-actions">
                <v-btn text color="grey darken-1" class="cancel-btn" @click="closeModal">
                    Cancel
                </v-btn>
                <v-spacer></v-spacer>
                <v-btn color="primary" class="create-btn" @click="saveEvent">
                    <v-icon left>mdi-check</v-icon>
                    {{ isEditing ? 'Update Event' : 'Create Event' }}
                </v-btn>
            </v-card-actions>
        </v-card>
    </v-dialog>
</template>

<script setup lang="ts">
import { ref, computed, watch, onMounted } from 'vue';
import { useUserStore } from "../stores/userStore";

interface House {
    houseId: string;
    address: string;
    color: string;
}

interface Event {
    id: number;
    houseId: string | null;
    houseName: string;
    startDate: string;
    endDate: string;
    details: string;
    color: string;
}

interface Props {
    value: boolean;
    editEvent: Event | null;
}

const props = withDefaults(defineProps<Props>(), {
    value: true,
    editEvent: null
});

const emit = defineEmits<{
    (e: 'input', value: boolean): void;
    (e: 'close'): void;
    (e: 'save', event: Event): void;
}>();

const userStore = useUserStore();

// Fix the houses computed property
const houses = computed<House[]>(() => {
    if (!userStore.userData?.houses) return [];
    return userStore.userData.houses;
});

// Initialize store on mount
onMounted(async (): Promise<void> => {
    console.log('Component mounted, initializing auth listener');
    if (!userStore.userData) {
        await userStore.initAuthListener();
    }
});

watch(() => userStore.isLoading, (loading: boolean) => {
    console.log('Loading state changed:', loading);
});

watch(() => userStore.userData, (userData) => {
    console.log('UserData changed:', userData);
});

const dialog = ref<boolean>(props.value);
const isEditing = ref<boolean>(false);
const selectedHouse = ref<string | null>(null);
const startDate = ref<string>(new Date().toISOString().substr(0, 10));
const endDate = ref<string>(new Date().toISOString().substr(0, 10));
const startDateMenu = ref<boolean>(false);
const endDateMenu = ref<boolean>(false);
const eventDetails = ref<string>('');
const selectedColor = ref<string>('#6200ea');
const houseMenuOpen = ref<boolean>(false);

const eventColors = [
    '#6200ea', // Purple
    '#2979ff', // Blue
    '#00e676', // Green
    '#ffab00', // Amber
    '#ff3d00', // Red/Orange
    '#d500f9', // Magenta
    '#00bfa5', // Teal
    '#ff6d00'  // Orange
];

const resetForm = (): void => {
    isEditing.value = false;
    selectedHouse.value = null;
    startDate.value = new Date().toISOString().substr(0, 10);
    endDate.value = new Date().toISOString().substr(0, 10);
    eventDetails.value = '';
    selectedColor.value = '#6200ea';
};

watch(() => props.value, (val: boolean) => {
    dialog.value = val;
});

watch(() => dialog.value, (val: boolean) => {
    emit('input', val);
    if (!val) {
        emit('close');
    }
});

watch(() => props.editEvent, (event: Event | null) => {
    if (event) {
        isEditing.value = true;
        selectedHouse.value = event.houseId || null;
        startDate.value = event.startDate || new Date().toISOString().substr(0, 10);
        endDate.value = event.endDate || new Date().toISOString().substr(0, 10);
        eventDetails.value = event.details || '';
        selectedColor.value = event.color || '#6200ea';
    } else {
        resetForm();
    }
}, { immediate: true });

const closeModal = (): void => {
    dialog.value = false;
    resetForm();
};

const saveEvent = (): void => {
    const eventData: Event = {
        id: isEditing.value && props.editEvent ? props.editEvent.id : Date.now(),
        houseId: selectedHouse.value,
        houseName: houses.value.find(h => h.houseId === selectedHouse.value)?.address || '',
        startDate: startDate.value,
        endDate: endDate.value,
        details: eventDetails.value,
        color: selectedColor.value
    };

    emit('save', eventData);
    closeModal();
};

const selectedHouseDisplay = computed<string>(() => {
    if (!selectedHouse.value || !houses.value) return '';
    const selected = houses.value.find(h => h.houseId === selectedHouse.value);
    return selected ? selected.address : '';
});

const selectHouseItem = (house: House): void => {
    console.log('Selecting house:', house);
    selectedHouse.value = house.houseId;
    houseMenuOpen.value = false;
};

// Debug watchers
watch(() => userStore.userData, (newData) => {
    console.log('UserData changed:', newData?.houses);
}, { immediate: true });

watch(houses, (newHouses) => {
    console.log('Houses computed changed:', newHouses);
}, { immediate: true });
</script>

<style scoped>
.event-modal-dialog {
    margin: 16px;
    width: 100%;
}

.event-modal-card {
    border-radius: 20px;
    overflow: hidden;
    position: relative;
    background-color: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(12px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 450px;
    margin: 0 auto;
}

.modal-glass-effect {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.25) 0%, rgba(255, 255, 255, 0.05) 100%);
    pointer-events: none;
    z-index: 0;
}

.modal-header {
    background: linear-gradient(135deg, #6200ea 0%, #9c27b0 100%);
    color: white;
    padding: 16px 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: relative;
    z-index: 1;
    box-shadow: 0 4px 15px rgba(98, 0, 234, 0.2);
}

.close-btn {
    background-color: rgba(255, 255, 255, 0.2) !important;
    backdrop-filter: blur(4px);
    margin-right: -8px;
}

.modal-content {
    padding: 20px;
    position: relative;
    z-index: 1;
}

.input-group {
    margin-bottom: 20px;
}

.input-label {
    font-size: 14px;
    font-weight: 500;
    color: rgba(0, 0, 0, 0.7);
}

.glass-input {
    background-color: rgba(255, 255, 255, 0.6) !important;
    backdrop-filter: blur(4px);
    border: 1px solid rgba(98, 0, 234, 0.15) !important;
    border-radius: 10px !important;
    transition: all 0.2s ease;
    margin-top: 4px;
}

.glass-input:hover {
    background-color: rgba(255, 255, 255, 0.8) !important;
    box-shadow: 0 4px 10px rgba(98, 0, 234, 0.08);
    border: 1px solid rgba(98, 0, 234, 0.3) !important;
}

.glass-input:focus,
.glass-input.v-input--is-focused {
    background-color: rgba(255, 255, 255, 0.9) !important;
    box-shadow: 0 6px 15px rgba(98, 0, 234, 0.1);
    border: 1px solid rgba(98, 0, 234, 0.5) !important;
}

.date-range-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 16px;
    margin-bottom: 20px;
}

.color-picker-container {
    display: flex;
    gap: 12px;
    margin-top: 10px;
}

.color-option {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.color-option:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.color-option.selected {
    transform: scale(1.1);
    box-shadow: 0 0 0 2px white, 0 0 0 4px currentColor;
}

.modal-actions {
    padding: 12px 20px 20px;
    position: relative;
    z-index: 1;
}

.cancel-btn {
    border-radius: 10px;
    font-weight: 500;
    text-transform: none;
    letter-spacing: 0;
    padding: 0 16px;
    height: 40px;
}

.create-btn {
    border-radius: 10px;
    font-weight: 500;
    text-transform: none;
    letter-spacing: 0;
    padding: 0 20px;
    height: 40px;
    background: linear-gradient(135deg, #6200ea 0%, #9c27b0 100%) !important;
    box-shadow: 0 4px 15px rgba(98, 0, 234, 0.3) !important;
    transition: all 0.2s ease;
}

.create-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(98, 0, 234, 0.4) !important;
}

/* Make the date picker more modern */
:deep(.v-date-picker-table) {
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
    border-radius: 12px;
    overflow: hidden;
}

/* Add these new styles */
:deep(.v-select__content) {
    transition: none !important;
}

:deep(.v-overlay__content) {
    transition: opacity 0.2s ease-in-out !important;
    position: absolute;
}

:deep(.v-select .v-field__input) {
    min-height: 44px;
}

:deep(.v-list) {
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1) !important;
}

:deep(.v-overlay__scrim) {
    opacity: 0 !important;
}

/* Ensure menu appears directly below the input */
:deep(.v-select .v-field) {
    border-radius: 8px;
    transition: all 0.2s ease;
}

:deep(.v-select .v-field.v-field--active) {
    transform: none !important;
}

/* Reset all transitions and transforms */
:deep(.v-overlay--active),
:deep(.v-overlay__content),
:deep(.v-menu),
:deep(.v-field),
:deep(.v-field__field),
:deep(.v-select),
:deep(.v-select__content),
:deep(.select-menu-content) {
    transition: none !important;
}

:deep(.v-overlay__content) {
    border-radius: 8px !important;
    max-width: calc(100vw - 32px) !important;
}

/* Remove problematic position rules */
.house-menu {
    min-width: 250px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

:deep(.house-item) {
    cursor: pointer;
    padding: 8px 16px !important;
    margin: 4px !important;
    border-radius: 6px !important;
    transition: background-color 0.2s ease;
}

:deep(.house-item:hover) {
    background-color: rgba(98, 0, 234, 0.05) !important;
}

:deep(.v-menu__content) {
    z-index: 9999 !important;
    position: fixed !important;
}

:deep(.v-overlay__content) {
    border-radius: 8px !important;
    position: absolute !important;
    max-width: calc(100vw - 32px) !important;
}

.color-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: inline-block;
}

:deep(.v-list-item) {
    margin-bottom: 4px !important;
    border-radius: 8px !important;
}

:deep(.v-list-item:hover) {
    background-color: rgba(98, 0, 234, 0.05) !important;
}

:deep(.v-list-item--active) {
    background-color: rgba(98, 0, 234, 0.1) !important;
}
</style>
</file>

<file path="src/components/Playground2.vue">
<template>
  <v-navigation-drawer v-model="drawer" :rail="rail" @mouseenter="rail = false" @mouseleave="rail = !isMobile"
    :permanent="!isMobile" :temporary="isMobile" :location="location" width="300" class="calendar-sidebar" rounded="lg"
    elevation="4">
    <!-- User Profile Section -->
    <div class="user-profile pa-4">
      <v-avatar size="56" color="primary" class="elevation-2 mb-2" v-if="!rail || isMobile">
        <span class="text-h6 font-weight-medium">{{ userInitials }}</span>
      </v-avatar>
      <v-avatar size="36" color="primary" class="elevation-2 mb-2" v-else>
        <span class="text-subtitle-2 font-weight-medium">{{ userInitials }}</span>
      </v-avatar>

      <div v-if="!rail || isMobile" class="user-info mt-2">
        <div class="text-h6">{{ user.name }}</div>
        <div class="text-body-2 text-medium-emphasis">{{ user.email }}</div>
      </div>
    </div>

    <v-divider></v-divider>

    <!-- Calendar Controls -->
    <div class="calendar-controls pa-4" v-if="!rail || isMobile">
      <v-btn block color="primary" prepend-icon="mdi-plus" class="mb-4 create-event-btn" elevation="1"
        @click="createEvent">
        Create Event
      </v-btn>

      <v-menu v-model="dateMenu" :close-on-content-click="false" location="bottom" transition="scale-transition">
        <template v-slot:activator="{ props }">
          <v-btn block variant="outlined" class="mb-4 date-picker-btn" prepend-icon="mdi-calendar" v-bind="props">
            {{ formattedCurrentDate }}
          </v-btn>
        </template>
        <v-date-picker v-model="currentDate" @update:model-value="dateMenu = false"></v-date-picker>
      </v-menu>
    </div>

    <div class="calendar-controls-rail pa-2" v-else>
      <v-btn icon color="primary" size="small" class="mb-4" @click="createEvent">
        <v-icon>mdi-plus</v-icon>
      </v-btn>

      <v-btn icon variant="outlined" size="small" class="mb-4" @click="dateMenu = true">
        <v-icon>mdi-calendar</v-icon>
      </v-btn>
    </div>

    <v-divider></v-divider>

    <!-- Houses Section -->
    <div class="houses-section pa-4">
      <div class="d-flex align-center justify-space-between mb-3">
        <div class="text-subtitle-1 font-weight-medium">My Houses</div>
        <v-btn icon variant="text" density="comfortable" color="primary" @click="addHouse">
          <v-icon>mdi-plus</v-icon>
        </v-btn>
      </div>

      <v-slide-y-transition group>
        <v-card v-for="house in houses" :key="house.id" :color="house.color" class="house-card mb-2" variant="outlined"
          :ripple="false" @click="toggleHouseSelection(house)">
          <div class="d-flex align-center pa-3">
            <v-checkbox v-model="house.selected" :color="house.color" hide-details density="compact"
              @click.stop="toggleHouseSelection(house)"></v-checkbox>
            <span class="ml-2 text-body-2">{{ house.name }}</span>
            <v-spacer></v-spacer>
            <v-btn icon variant="text" size="small" @click.stop="removeHouse(house)" class="remove-btn">
              <v-icon size="small">mdi-close</v-icon>
            </v-btn>
          </div>
        </v-card>
      </v-slide-y-transition>
    </div>

    <v-divider></v-divider>

    <!-- View Options -->
    <div class="view-options pa-4" v-if="!rail || isMobile">
      <div class="text-subtitle-1 font-weight-medium mb-3">View</div>
      <v-btn-group variant="outlined" divided class="w-100">
        <v-btn v-for="view in viewOptions" :key="view.value" :value="view.value" :active="currentView === view.value"
          @click="currentView = view.value" class="flex-1">
          {{ view.label }}
        </v-btn>
      </v-btn-group>
    </div>

    <template v-slot:append>
      <div class="pa-4">
        <v-btn v-if="!isMobile" block variant="tonal" @click="rail = !rail"
          :prepend-icon="rail ? 'mdi-chevron-right' : 'mdi-chevron-left'">
          {{ rail ? '' : 'Collapse' }}
        </v-btn>
      </div>
    </template>
  </v-navigation-drawer>
</template>

<script setup lang="ts">
import { ref, computed, onMounted, watch } from 'vue';
import { format } from 'date-fns';

interface House {
  id: number;
  name: string;
  color: string;
  selected: boolean;
}

interface User {
  name: string;
  email: string;
}

interface ViewOption {
  label: string;
  value: string;
}

interface Props {
  location: string;
}

// Props
const props = withDefaults(defineProps<Props>(), {
  location: 'left'
});

// Emits
const emit = defineEmits<{
  (e: 'create-event'): void;
  (e: 'add-house'): void;
  (e: 'remove-house', house: House): void;
  (e: 'toggle-house', house: House): void;
  (e: 'change-view', view: string): void;
  (e: 'change-date', date: string): void;
}>();

// State
const drawer = ref<boolean>(true);
const rail = ref<boolean>(false);
const isMobile = ref<boolean>(false);
const dateMenu = ref<boolean>(false);
const currentDate = ref<string>(new Date().toISOString().substr(0, 10));
const currentView = ref<string>('month');

// User data
const user = ref<User>({
  name: 'Corey Perez',
  email: 'corbperez@gmail.com'
});

// Houses data
const houses = ref<House[]>([
  { id: 1, name: '444 CONTROL HOUSE', color: 'green', selected: true },
  { id: 2, name: '444 OLD MAIN ST', color: 'purple', selected: true }
]);

// View options
const viewOptions = ref<ViewOption[]>([
  { label: 'Day', value: 'day' },
  { label: 'Week', value: 'week' },
  { label: 'Month', value: 'month' }
]);

// Computed
const userInitials = computed<string>(() => {
  return user.value.name
    .split(' ')
    .map(name => name[0])
    .join('');
});

const formattedCurrentDate = computed<string>(() => {
  try {
    return format(new Date(currentDate.value), 'MMMM d, yyyy');
  } catch (e) {
    return currentDate.value;
  }
});

// Methods
const createEvent = (): void => {
  emit('create-event');
};

const addHouse = (): void => {
  emit('add-house');
};

const removeHouse = (house: House): void => {
  emit('remove-house', house);
};

const toggleHouseSelection = (house: House): void => {
  emit('toggle-house', house);
};

// Watch for changes
watch(() => currentView.value, (newView: string) => {
  emit('change-view', newView);
});

watch(() => currentDate.value, (newDate: string) => {
  emit('change-date', newDate);
});

// Check for mobile on mount and resize
const checkMobile = (): void => {
  isMobile.value = window.innerWidth < 960;
  if (isMobile.value) {
    rail.value = false;
    drawer.value = false;
  } else {
    drawer.value = true;
  }
};

onMounted(() => {
  checkMobile();
  window.addEventListener('resize', checkMobile);
});
</script>

<style scoped>
.calendar-sidebar {
  border-right: 1px solid rgba(var(--v-theme-on-surface), 0.08);
}

.user-profile {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}

.house-card {
  transition: all 0.2s ease;
  border-radius: 8px;
}

.house-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
}

.house-card .remove-btn {
  opacity: 0;
  transition: opacity 0.2s ease;
}

.house-card:hover .remove-btn {
  opacity: 1;
}

.create-event-btn {
  transition: transform 0.2s ease;
}

.create-event-btn:hover {
  transform: translateY(-2px);
}

.date-picker-btn {
  transition: background-color 0.2s ease;
}

/* Ensure proper spacing in rail mode */
.v-navigation-drawer--rail .calendar-controls-rail {
  display: flex;
  flex-direction: column;
  align-items: center;
}
</style>
</file>

<file path="src/components/Register.vue">
<template>
  <div class="register-container">
    <div class="register-card">
      <div class="modal-glass-effect"></div>

      <!-- Header with gradient -->
      <div class="modal-header">
        <div class="d-flex align-center">
          <v-icon color="white" class="mr-2">mdi-account-plus</v-icon>
          <span>Create Account</span>
        </div>
      </div>

      <div class="modal-content">
        <form class="register-form" @submit.prevent="handleRegister">
          <!-- Email Input -->
          <div class="input-group">
            <div class="d-flex align-center mb-1">
              <v-icon color="primary" size="20">mdi-email</v-icon>
              <span class="ml-2 input-label">Email</span>
            </div>
            <input id="email" v-model="form.email" type="email" placeholder="Enter your email" :disabled="isLoading"
              aria-required="true" autocomplete="email" class="glass-input" />
          </div>

          <!-- Password Input -->
          <div class="input-group">
            <div class="d-flex align-center mb-1">
              <v-icon color="primary" size="20">mdi-lock</v-icon>
              <span class="ml-2 input-label">Password</span>
            </div>
            <input id="password" v-model="form.password" type="password" placeholder="Enter your password"
              :disabled="isLoading" aria-required="true" minlength="8" autocomplete="new-password"
              class="glass-input" />
          </div>

          <!-- Full Name Input -->
          <div class="input-group">
            <div class="d-flex align-center mb-1">
              <v-icon color="primary" size="20">mdi-account</v-icon>
              <span class="ml-2 input-label">Full Name</span>
            </div>
            <input id="fullName" v-model="form.fullName" type="text" placeholder="Enter your full name"
              :disabled="isLoading" aria-required="true" autocomplete="name" class="glass-input" />
          </div>

          <div class="modal-actions">
            <router-link to="/login" class="cancel-btn">
              Already have an account? Login
            </router-link>
            <button type="submit" :disabled="isLoading || !isFormValid" class="create-btn">
              <v-icon start v-if="!isLoading">mdi-check</v-icon>
              <span v-if="isLoading">Registering...</span>
              <span v-else>Register</span>
            </button>
          </div>

          <p v-if="error" class="error-message">{{ error }}</p>
        </form>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { db } from '../firebaseConfig';
import { doc, setDoc } from 'firebase/firestore';
import { ref, computed } from 'vue';
import { registerUser } from '../auth';
import { useRouter } from 'vue-router';

interface RegisterForm {
  email: string;
  password: string;
  fullName: string;
}

const router = useRouter();
const isLoading = ref<boolean>(false);
const error = ref<string>('');

const form = ref<RegisterForm>({
  email: '',
  password: '',
  fullName: ''
});

const isFormValid = computed<boolean>(() => {
  return form.value.email &&
    form.value.password &&
    form.value.password.length >= 8 &&
    form.value.fullName;
});

const resetForm = (): void => {
  form.value = {
    email: '',
    password: '',
    fullName: ''
  };
  error.value = '';
};

const handleRegister = async (): Promise<void> => {
  if (!isFormValid.value) return;

  isLoading.value = true;
  error.value = '';

  try {
    const userCredential = await registerUser(form.value.email, form.value.password);
    const userId = userCredential.user.uid;

    await setDoc(doc(db, 'users', userId), {
      fullName: form.value.fullName,
      email: form.value.email,
      houses: [],
      id: userId
    });

    resetForm();
    router.push('/home');
  } catch (err) {
    error.value = err instanceof Error ? err.message : 'Registration failed. Please try again.';
  } finally {
    isLoading.value = false;
  }
};
</script>

<style scoped>
.register-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  padding: 20px;
  background: linear-gradient(135deg, #f5f7fa 0%, #e0e6ed 100%);
}

.register-card {
  border-radius: 20px;
  overflow: hidden;
  position: relative;
  background-color: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(12px);
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  width: 100%;
  max-width: 450px;
  margin: 0 auto;
}

.modal-glass-effect {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.25) 0%, rgba(255, 255, 255, 0.05) 100%);
  pointer-events: none;
  z-index: 0;
}

.modal-header {
  background: linear-gradient(135deg, #6200ea 0%, #9c27b0 100%);
  color: white;
  padding: 16px 20px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: relative;
  z-index: 1;
  box-shadow: 0 4px 15px rgba(98, 0, 234, 0.2);
}

.modal-content {
  padding: 20px;
  position: relative;
  z-index: 1;
}

.register-form {
  width: 100%;
}

.input-group {
  margin-bottom: 20px;
}

.input-label {
  font-size: 14px;
  font-weight: 500;
  color: rgba(0, 0, 0, 0.7);
}

.d-flex {
  display: flex;
}

.align-center {
  align-items: center;
}

.mb-1 {
  margin-bottom: 4px;
}

.ml-2 {
  margin-left: 8px;
}

.mr-2 {
  margin-right: 8px;
}

.glass-input {
  width: 100%;
  padding: 12px 16px;
  background-color: rgba(255, 255, 255, 0.6);
  backdrop-filter: blur(4px);
  border: 1px solid rgba(98, 0, 234, 0.15);
  border-radius: 10px;
  transition: all 0.2s ease;
  margin-top: 4px;
  outline: none;
  font-size: 14px;
}

.glass-input:hover {
  background-color: rgba(255, 255, 255, 0.8);
  box-shadow: 0 4px 10px rgba(98, 0, 234, 0.08);
  border: 1px solid rgba(98, 0, 234, 0.3);
}

.glass-input:focus {
  background-color: rgba(255, 255, 255, 0.9);
  box-shadow: 0 6px 15px rgba(98, 0, 234, 0.1);
  border: 1px solid rgba(98, 0, 234, 0.5);
}

.modal-actions {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 16px;
  padding: 12px 0 20px;
  position: relative;
  z-index: 1;
}

.cancel-btn {
  color: rgba(0, 0, 0, 0.6);
  text-decoration: none;
  font-size: 14px;
  transition: color 0.2s ease;
}

.cancel-btn:hover {
  color: #6200ea;
  text-decoration: underline;
}

.create-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  width: 100%;
  border-radius: 10px;
  font-weight: 500;
  letter-spacing: 0;
  padding: 0 20px;
  height: 44px;
  background: linear-gradient(135deg, #6200ea 0%, #9c27b0 100%);
  box-shadow: 0 4px 15px rgba(98, 0, 234, 0.3);
  transition: all 0.2s ease;
  color: white;
  border: none;
  cursor: pointer;
}

.create-btn:hover:not(:disabled) {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(98, 0, 234, 0.4);
}

.create-btn:disabled {
  background: linear-gradient(135deg, #9e9e9e 0%, #757575 100%);
  box-shadow: none;
  cursor: not-allowed;
}

.error-message {
  color: #ff4444;
  margin-top: 1rem;
  font-size: 0.9rem;
  text-align: center;
  background-color: rgba(255, 68, 68, 0.1);
  padding: 8px;
  border-radius: 8px;
  border-left: 3px solid #ff4444;
}
</style>
</file>

<file path="src/components/TimePicker.vue">
<template>
    <v-dialog :model-value="props.isVisible" @update:model-value="$emit('update:isVisible', $event)" width="400"
        content-class="time-picker-dialog">
        <v-card class="time-picker-card">
            <div class="time-picker-header">
                <v-card-title class="text-center pt-3 pb-2">Select Time</v-card-title>
            </div>
            <v-card-text>
                <div class="time-picker-container">
                    <div class="time-display">
                        <div class="time-value">{{ modelValue || "12:00 AM" }}</div>
                    </div>
                    <div class="time-dropdown-labels">
                        <div class="label-hour">Hour</div>
                        <div class="label-minute">Minute</div>
                        <div class="label-period">AM/PM</div>
                    </div>
                    <div class="time-dropdowns">
                        <v-select v-model="selectedHour" :items="hours" class="time-select hour-select" hide-details
                            density="compact" variant="outlined" @update:model-value="updateTime" />
                        <v-select v-model="selectedMinute" :items="minutes" class="time-select minute-select"
                            hide-details density="compact" variant="outlined" @update:model-value="updateTime" />
                        <v-select v-model="selectedPeriod" :items="['AM', 'PM']" class="time-select period-select"
                            hide-details density="compact" variant="outlined" @update:model-value="updateTime" />
                    </div>
                </div>
            </v-card-text>
            <v-card-actions class="time-picker-actions">
                <v-spacer></v-spacer>
                <v-btn color="primary" variant="elevated" class="confirm-btn" @click="close">OK</v-btn>
            </v-card-actions>
        </v-card>
    </v-dialog>
</template>

<script setup lang="ts">
import { ref, watch } from 'vue';

interface Props {
    modelValue: string;
    isVisible: boolean;
}

const props = defineProps<Props>();

const emit = defineEmits<{
    (e: 'update:modelValue', value: string): void;
    (e: 'update:isVisible', value: boolean): void;
}>();

const hours = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];
const minutes = ['00', '05', '10', '15', '20', '25', '30', '35', '40', '45', '50', '55'];

const selectedHour = ref<string>('12');
const selectedMinute = ref<string>('00');
const selectedPeriod = ref<'AM' | 'PM'>('AM');

// Initialize values when dialog opens
watch(() => props.isVisible, (newValue: boolean) => {
    if (newValue && props.modelValue) {
        const match = props.modelValue.match(/(\d+):(\d+)\s*(AM|PM)/i);
        if (match) {
            selectedHour.value = match[1].replace(/^0+/, '') || '12';
            selectedMinute.value = match[2];
            selectedPeriod.value = match[3].toUpperCase() as 'AM' | 'PM';
        }
    }
});

function updateTime(): void {
    emit('update:modelValue',
        `${selectedHour.value}:${selectedMinute.value} ${selectedPeriod.value}`
    );
}

function close(): void {
    emit('update:isVisible', false);
}
</script>

<style scoped>
.time-picker-dialog {
    border-radius: 16px;
    overflow: hidden;
}

.time-picker-card {
    border-radius: 16px;
    overflow: hidden;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
}

.time-picker-header {
    background: linear-gradient(135deg, var(--primary-color) 0%, var(--success-color) 100%);
    color: white;
    padding: 8px 0;
    box-shadow: 0 2px 8px rgba(65, 105, 226, 0.2);
}

.time-picker-container {
    padding: 1.5rem;
    background-color: rgba(255, 255, 255, 0.8);
}

.time-display {
    text-align: center;
    margin-bottom: 1.5rem;
    background-color: rgba(65, 105, 226, 0.05);
    padding: 12px;
    border-radius: 10px;
    border: 1px solid rgba(65, 105, 226, 0.1);
}

.time-value {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--primary-color);
    letter-spacing: 0.5px;
}

.time-dropdowns {
    display: flex;
    gap: 0.75rem;
}

.time-select {
    flex: 1;
    background-color: rgba(255, 255, 255, 0.7) !important;
    border-radius: 8px !important;
    transition: all 0.2s ease;
}

.time-select:hover {
    background-color: rgba(255, 255, 255, 0.9) !important;
    box-shadow: 0 2px 8px rgba(65, 105, 226, 0.1);
}

.time-dropdown-labels {
    display: flex;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
}

.time-dropdown-labels>div {
    flex: 1;
    text-align: center;
    font-size: 0.85rem;
    font-weight: 500;
    color: rgba(0, 0, 0, 0.7);
}

.time-picker-actions {
    padding: 12px 16px 16px;
    background-color: rgba(255, 255, 255, 0.9);
}

.confirm-btn {
    border-radius: 8px;
    font-weight: 500;
    text-transform: none;
    letter-spacing: 0;
    padding: 0 20px;
    height: 36px;
    background: linear-gradient(135deg, var(--primary-color) 0%, var(--success-color) 100%) !important;
    box-shadow: 0 4px 12px rgba(65, 105, 226, 0.3) !important;
    transition: all 0.2s ease;
}

.confirm-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(65, 105, 226, 0.4) !important;
}

:deep(.v-btn--text) {
    color: var(--primary-color) !important;
}

:deep(.v-field--outlined) {
    border-color: rgba(65, 105, 226, 0.2) !important;
    border-radius: 8px !important;
}

:deep(.v-field--outlined:hover) {
    border-color: rgba(65, 105, 226, 0.4) !important;
}

:deep(.v-field--outlined:focus-within) {
    border-color: var(--primary-color) !important;
}

:deep(.v-field__input) {
    font-weight: 500;
    color: var(--primary-color);
}

:deep(.v-field__outline) {
    border-radius: 8px !important;
}

:deep(.v-menu__content) {
    border-radius: 8px !important;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;
}

:deep(.v-list-item--active) {
    background-color: rgba(65, 105, 226, 0.1) !important;
    color: var(--primary-color) !important;
}

:deep(.v-list-item:hover) {
    background-color: rgba(65, 105, 226, 0.05) !important;
}
</style>
</file>

<file path="src/components/Userprofile.vue">
<script setup lang="ts">
import { ref, computed, onMounted } from 'vue';
import { useUserStore } from '../stores/userStore';
import { useRouter } from 'vue-router';
import { updateDoc, doc } from 'firebase/firestore';
import { db } from '../firebaseConfig';

interface UserFormData {
    fullName: string;
    email: string;
    phone: string;
}

const userStore = useUserStore();
const router = useRouter();
const isEditing = ref<boolean>(false);
const isSaving = ref<boolean>(false);
const showSuccessAlert = ref<boolean>(false);
const errorMessage = ref<string>('');

// Form data
const formData = ref<UserFormData>({
    fullName: '',
    email: '',
    phone: ''
});

// Load user data when component mounts
onMounted((): void => {
    if (userStore.userData) {
        formData.value.fullName = userStore.userData.fullName || '';
        formData.value.email = userStore.userData.email || '';
    }
});

// Computed property for user's initial
const userInitial = computed<string>(() => {
    if (formData.value.fullName) {
        return formData.value.fullName.charAt(0).toUpperCase();
    }
    if (formData.value.email) {
        return formData.value.email.charAt(0).toUpperCase();
    }
    return 'U';
});

// Computed property for total houses count
const totalHouses = computed<number>(() => {
    return userStore.houses?.length || 0;
});

async function saveProfile(): Promise<void> {
    try {
        isSaving.value = true;
        errorMessage.value = '';

        if (!userStore.userData?.id) {
            throw new Error('No user is logged in');
        }

        // Update user document in Firestore
        const userDocRef = doc(db, "users", userStore.userData.id);
        await updateDoc(userDocRef, {
            fullName: formData.value.fullName,
        });

        // Update local state
        userStore.userData.fullName = formData.value.fullName;

        isEditing.value = false;
        showSuccessAlert.value = true;

        // Hide success alert after 3 seconds
        setTimeout(() => {
            showSuccessAlert.value = false;
        }, 3000);
    } catch (error) {
        console.error('Error updating profile:', error);
        errorMessage.value = error instanceof Error ? error.message : 'Failed to update profile';
    } finally {
        isSaving.value = false;
    }
}

function cancelEdit(): void {
    // Reset form to current values
    formData.value.fullName = userStore.userData?.fullName || '';
    isEditing.value = false;
    errorMessage.value = '';
}

function goBack(): void {
    router.push('/home');
}

</script>

<template>
    <v-container fluid class="profile-container pa-4 pa-md-6 ma-0">
        <v-row>
            <v-col cols="12">
                <div class="d-flex align-center mb-4">
                    <v-btn icon variant="text" class="mr-2" @click="goBack">
                        <v-icon>mdi-arrow-left</v-icon>
                    </v-btn>
                    <h1 class="text-h4 font-weight-bold">Profile Settings</h1>
                </div>
            </v-col>
        </v-row>

        <v-row class="profile-content">
            <v-col cols="12" md="4">
                <v-card class="mb-4 profile-card" elevation="2" rounded="lg">
                    <v-card-text class="text-center pa-6">
                        <v-avatar size="96" color="primary" class="mb-4">
                            <span class="text-h4 font-weight-medium white--text">{{ userInitial }}</span>
                        </v-avatar>

                        <h2 class="text-h5 font-weight-bold">
                            {{ userStore.userData?.fullName || 'Guest User' }}
                        </h2>
                        <p class="text-body-1 text-medium-emphasis">
                            {{ userStore.userData?.email || 'No email provided' }}
                        </p>

                        <v-divider class="my-4"></v-divider>

                        <div class="d-flex justify-space-around mb-2">
                            <div class="text-center">
                                <div class="text-h5 font-weight-bold">{{ totalHouses }}</div>
                                <div class="text-caption text-medium-emphasis">Properties</div>
                            </div>
                        </div>
                    </v-card-text>
                </v-card>
            </v-col>

            <v-col cols="12" md="8">
                <v-card class="profile-card" elevation="2" rounded="lg">
                    <v-card-title class="d-flex justify-space-between align-center pa-6">
                        <span class="text-h5">Personal Information</span>
                        <v-btn v-if="!isEditing" color="primary" variant="text" @click="isEditing = true">
                            <v-icon left>mdi-pencil</v-icon>
                            Edit
                        </v-btn>
                    </v-card-title>

                    <v-card-text class="pa-6 pt-2">
                        <v-alert v-if="showSuccessAlert" type="success" variant="tonal" class="mb-4" density="compact">
                            Profile updated successfully
                        </v-alert>

                        <v-alert v-if="errorMessage" type="error" variant="tonal" class="mb-4" density="compact">
                            {{ errorMessage }}
                        </v-alert>

                        <v-form @submit.prevent="saveProfile">
                            <v-row>
                                <v-col cols="12">
                                    <v-text-field v-model="formData.fullName" label="Full Name" variant="outlined"
                                        :readonly="!isEditing" density="comfortable" bg-color="surface"
                                        class="profile-field" prepend-inner-icon="mdi-account"></v-text-field>
                                </v-col>

                                <v-col cols="12">
                                    <v-text-field v-model="formData.email" label="Email" variant="outlined" readonly
                                        density="comfortable" bg-color="surface" class="profile-field"
                                        prepend-inner-icon="mdi-email"></v-text-field>
                                </v-col>

                                <v-col cols="12" v-if="isEditing">
                                    <div class="d-flex justify-end">
                                        <v-btn variant="outlined" color="grey" class="mr-2" @click="cancelEdit">
                                            Cancel
                                        </v-btn>
                                        <v-btn color="primary" variant="elevated" @click="saveProfile"
                                            :loading="isSaving">
                                            Save Changes
                                        </v-btn>
                                    </div>
                                </v-col>
                            </v-row>
                        </v-form>
                    </v-card-text>
                </v-card>

                <v-card class="profile-card mt-4" elevation="2" rounded="lg">
                    <v-card-title class="pa-6">
                        <span class="text-h5">Account Settings</span>
                    </v-card-title>

                    <v-card-text class="pa-6 pt-2">
                        <v-list>
                            <v-list-item prepend-icon="mdi-logout" title="Logout" subtitle="Sign out from your account"
                                router-link to="/Login" class="logout-item" @click="userStore.logout"></v-list-item>


                        </v-list>
                    </v-card-text>
                </v-card>
            </v-col>
        </v-row>
    </v-container>
</template>

<style scoped>
.profile-container {
    background-color: #f5f5f5;
    min-height: 100vh;
}

.profile-card {
    border-radius: 16px;
    overflow: hidden;
    background-color: white;
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}

.profile-card:hover {
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1) !important;
}

.profile-field {
    border-radius: 8px;
    transition: all 0.2s ease;
}

.logout-item {
    border-radius: 8px;
    transition: background-color 0.2s ease;
}

.logout-item:hover {
    background-color: rgba(244, 67, 54, 0.1) !important;
}
</style>
</file>

<file path="src/constants/calendar.ts">
/**
 * Calendar-related constants
 */

import { CalendarViewType, ViewOption } from "../models/calendar";

/**
 * Default calendar views available in the application
 */
export const CALENDAR_VIEWS: ViewOption[] = [
  { title: "Month", value: "dayGridMonth" },
  { title: "Week", value: "timeGridWeek" },
  { title: "Day", value: "timeGridDay" },
];

/**
 * Map external view values to internal FullCalendar view values
 */
export const VIEW_MAP: Record<string, CalendarViewType> = {
  month: "dayGridMonth",
  week: "timeGridWeek",
  day: "timeGridDay",
};

/**
 * Default time slots for check-in times
 */
export const CHECK_IN_TIME_SLOTS = [
  { label: "12:00 PM", value: "12:00" },
  { label: "1:00 PM", value: "13:00" },
  { label: "2:00 PM", value: "14:00" },
  { label: "3:00 PM", value: "15:00" },
  { label: "4:00 PM", value: "16:00" },
  { label: "5:00 PM", value: "17:00" },
  { label: "6:00 PM", value: "18:00" },
];

/**
 * Default time slots for check-out times
 */
export const CHECK_OUT_TIME_SLOTS = [
  { label: "8:00 AM", value: "08:00" },
  { label: "9:00 AM", value: "09:00" },
  { label: "10:00 AM", value: "10:00" },
  { label: "11:00 AM", value: "11:00" },
  { label: "12:00 PM", value: "12:00" },
];

/**
 * Default colors for events and houses
 */
export const DEFAULT_COLORS = [
  "#2979ff", // Blue
  "#43a047", // Green
  "#e53935", // Red
  "#ff9800", // Orange
  "#9c27b0", // Purple
  "#00acc1", // Cyan
  "#5e35b1", // Deep Purple
  "#f44336", // Red
  "#3f51b5", // Indigo
  "#4caf50", // Green
];
</file>

<file path="src/constants/index.ts">
/**
 * Index file to re-export all constants
 */

export * from "./calendar";
</file>

<file path="src/main.ts">
import { createApp } from 'vue';
import { createPinia } from 'pinia';
import App from './App.vue';
import router from './router';
import './assets/main.css';

const app = createApp(App);

app.use(createPinia());
app.use(router);

app.mount('#app');
</file>

<file path="src/models/auth.ts">
/**
 * Authentication-related interfaces
 */

import type { User } from './user'

/**
 * User credentials for login/registration
 */
export interface UserCredentials {
  /** User email address */
  email: string;

  /** User password */
  password: string;
}

/**
 * Registration data
 */
export interface RegistrationData extends UserCredentials {
  /** User's full name */
  fullName: string;
}

/**
 * Auth state
 */
export interface AuthState {
  /** Current authenticated user */
  user: User | null

  /** Authentication loading state */
  loading: boolean

  /** Authentication error */
  error: string | null
}

/**
 * Authentication service interface
 */
export interface AuthService {
  /** Login with email and password */
  login(credentials: UserCredentials): Promise<void>;

  /** Register a new user */
  register(data: RegistrationData): Promise<void>;

  /** Logout the current user */
  logout(): Promise<void>;

  /** Get the current authenticated user */
  getCurrentUser(): Promise<{ id: string; email: string } | null>;
}

export interface LoginCredentials {
  /** User's email address */
  email: string

  /** User's password */
  password: string

  /** Whether to remember the user */
  rememberMe: boolean
}

export interface RegisterData {
  /** User's email address */
  email: string

  /** User's password */
  password: string

  /** User's display name */
  displayName: string

  /** User's phone number */
  phoneNumber?: string
}

export interface PasswordResetRequest {
  /** User's email address */
  email: string
}

export interface PasswordResetData {
  /** New password */
  newPassword: string

  /** Password reset code */
  code: string
}

export interface AuthResponse {
  /** Authentication token */
  token: string

  /** Token expiration time */
  expiresIn: number

  /** Refresh token */
  refreshToken: string

  /** User data */
  user: User
}

export interface AuthError {
  /** Error code */
  code: string

  /** Error message */
  message: string

  /** Additional error details */
  details?: Record<string, unknown>
}
</file>

<file path="src/models/calendar.ts">
/**
 * Calendar-related interfaces for the application
 */

import type { User } from './user'

/**
 * Calendar event data model
 */
export interface CalendarEvent {
  /** Unique identifier for the event */
  id: string;

  /** Property ID this event belongs to */
  propertyId: string;

  /** Event title */
  title: string;

  /** Start date/time in ISO format */
  start: string;

  /** End date/time in ISO format (optional) */
  end: string;

  /** Whether the event is all-day */
  allDay: boolean;

  /** Event type */
  type: 'cleaning' | 'inspection' | 'maintenance' | 'other';

  /** Event status */
  status: 'scheduled' | 'in_progress' | 'completed' | 'cancelled';

  /** Color for the event in the calendar */
  color: string;

  /** Additional properties for the event */
  extendedProps: {
    /** Job ID for the event */
    jobId?: string;

    /** Assigned to */
    assignedTo?: {
      /** User ID of the assigned user */
      userId: string;

      /** Name of the assigned user */
      name: string;
    };

    /** Notes for the event */
    notes: string[];

    /** Supplies needed for the event */
    suppliesNeeded: string[];

    /** Special instructions for the event */
    specialInstructions: string[];

    /** Check-in time for the event */
    checkInTime?: string;

    /** Check-out time for the event */
    checkOutTime?: string;
  };

  /** Timestamp when the event was created */
  createdAt: string;

  /** Timestamp when the event was last updated */
  updatedAt: string;
}

/**
 * FullCalendar view types
 */
export type CalendarViewType = 'dayGridMonth' | 'timeGridWeek' | 'timeGridDay' | 'listWeek';

/**
 * External view type mapping
 */
export type ExternalViewType = 'month' | 'week' | 'day';

/**
 * View option for calendar display
 */
export interface ViewOption {
  /** Display name for the view */
  title: string;

  /** View value for FullCalendar */
  value: CalendarViewType;
}

/**
 * Calendar configuration
 */
export interface CalendarConfig {
  /** Initial view to display */
  initialView: CalendarViewType;

  /** Whether events can be edited */
  editable: boolean;

  /** Whether dates can be selected */
  selectable: boolean;

  /** Business hours configuration */
  businessHours: {
    /** Days of the week (0-6, where 0 is Sunday) */
    daysOfWeek: number[];

    /** Start time in HH:mm format */
    startTime: string;

    /** End time in HH:mm format */
    endTime: string;
  };

  /** Event display option */
  eventDisplay?: 'block' | 'list-item' | 'background' | 'inverse-background' | 'none';

  /** Event time format */
  eventTimeFormat?: {
    /** Hour format */
    hour: 'numeric' | '2-digit';

    /** Minute format */
    minute: 'numeric' | '2-digit';

    /** Whether to use 12-hour format */
    hour12: boolean;
  };
}

/**
 * Time slot for available booking times
 */
export interface TimeSlot {
  /** Display label */
  label: string;

  /** Time value in HH:mm format */
  value: string;

  /** Whether the slot is available */
  available: boolean;
}

export interface CalendarFilters {
  /** Filter by property */
  propertyId?: string;

  /** Filter by assigned user */
  assignedTo?: string;

  /** Filter by event type */
  type?: string;

  /** Filter by event status */
  status?: string;

  /** Filter by date range */
  dateRange?: {
    start: string;
    end: string;
  };
}
</file>

<file path="src/models/cleaning-job.ts">
export interface CleaningJob {
  id: string
  propertyId: string
  assignedTo: {
    userId: string
    name: string
    email: string
    phone: string
  }
  schedule: {
    start: string
    end: string
    duration: number // in minutes
  }
  type: 'regular' | 'turnover' | 'deep_clean' | 'special'
  status: CleaningJobStatus
  details: {
    notes: string[]
    suppliesNeeded: string[]
    specialInstructions: string[]
    checkInTime?: string // for turnover cleanings
    checkOutTime?: string // for turnover cleanings
  }
  completion: {
    completed: boolean
    completedAt?: string
    completedBy?: string
    notes?: string
    issues?: string[]
  }
  createdAt: string
  updatedAt: string
}

export type CleaningJobStatus = 'scheduled' | 'in_progress' | 'completed' | 'cancelled' | 'rescheduled'
export type CleaningJobType = 'regular' | 'turnover' | 'deep_clean' | 'special'
</file>

<file path="src/models/house.ts">
import type { User } from './user'

export interface House {
  /** Unique identifier for the house */
  id: string

  /** House name or title */
  name: string

  /** House description */
  description: string

  /** House address */
  address: {
    street: string
    city: string
    state: string
    zipCode: string
    country: string
  }

  /** House location coordinates */
  location?: {
    latitude: number
    longitude: number
  }

  /** House features and amenities */
  features: string[]

  /** House images */
  images: {
    url: string
    alt: string
    isPrimary: boolean
  }[]

  /** House status */
  status: HouseStatus

  /** House owner information */
  owner: {
    userId: string
    name: string
    contact: string
  }

  /** House manager information */
  manager?: {
    userId: string
    name: string
    contact: string
  }

  /** House settings */
  settings: {
    /** Check-in time in HH:mm format */
    checkInTime: string

    /** Check-out time in HH:mm format */
    checkOutTime: string

    /** Minimum stay duration in days */
    minStay: number

    /** Maximum stay duration in days */
    maxStay: number

    /** Cleaning fee */
    cleaningFee: number

    /** Security deposit */
    securityDeposit: number
  }

  /** Timestamp when the house was created */
  createdAt: string

  /** Timestamp when the house was last updated */
  updatedAt: string
}

export type HouseStatus = 'active' | 'inactive' | 'maintenance' | 'sold'

export interface HouseAvailability {
  /** House ID */
  houseId: string

  /** Date in ISO format */
  date: string

  /** Availability status */
  status: 'available' | 'booked' | 'blocked'

  /** If booked, the booking ID */
  bookingId?: string

  /** If blocked, the reason */
  blockReason?: string
}

export interface HouseBooking {
  /** Unique identifier for the booking */
  id: string

  /** House ID */
  houseId: string

  /** Guest information */
  guest: {
    userId: string
    name: string
    email: string
    phone: string
  }

  /** Booking dates */
  dates: {
    checkIn: string
    checkOut: string
  }

  /** Booking status */
  status: BookingStatus

  /** Number of guests */
  guests: number

  /** Total price */
  totalPrice: number

  /** Payment status */
  paymentStatus: PaymentStatus

  /** Special requests or notes */
  notes?: string

  /** Timestamp when the booking was created */
  createdAt: string

  /** Timestamp when the booking was last updated */
  updatedAt: string
}

export type BookingStatus = 'pending' | 'confirmed' | 'cancelled' | 'completed'
export type PaymentStatus = 'pending' | 'paid' | 'refunded' | 'failed'
</file>

<file path="src/models/index.ts">
/**
 * Index file to re-export all models
 */

// Export all models
export * from './user'
export * from './calendar'
export * from './house'
export * from './auth'

// Re-export commonly used types
export type {
  User,
  UserRole,
  UserPreferences,
  UserSettings
} from './user'

export type {
  CalendarEvent,
  CalendarViewType,
  ExternalViewType,
  CalendarConfig,
  TimeSlot,
  CalendarFilters
} from './calendar'

export type {
  House,
  HouseStatus,
  HouseAvailability,
  HouseBooking,
  BookingStatus,
  PaymentStatus
} from './house'

export type {
  AuthState,
  LoginCredentials,
  RegisterData,
  PasswordResetRequest,
  PasswordResetData,
  AuthResponse,
  AuthError
} from './auth'
</file>

<file path="src/models/property.ts">
export interface Property {
  id: string
  name: string
  address: {
    street: string
    city: string
    state: string
    zipCode: string
    country: string
  }
  location?: {
    latitude: number
    longitude: number
  }
  type: 'residential' | 'commercial' | 'vacation_rental' | 'hotel'
  cleaningRequirements: {
    frequency: 'daily' | 'weekly' | 'biweekly' | 'monthly' | 'custom'
    customFrequency?: string
    specialInstructions: string[]
    requiredSupplies: string[]
    estimatedDuration: number // in minutes
  }
  contact: {
    name: string
    email: string
    phone: string
    preferredContactMethod: 'email' | 'phone' | 'text'
  }
  accessInstructions: string
  colorCode: string // for calendar display
  status: 'active' | 'inactive'
  createdAt: string
  updatedAt: string
}

export type PropertyStatus = 'active' | 'inactive'
export type PropertyType = 'residential' | 'commercial' | 'vacation_rental' | 'hotel'
export type CleaningFrequency = 'daily' | 'weekly' | 'biweekly' | 'monthly' | 'custom'
</file>

<file path="src/models/services.ts">
/**
 * Service interfaces for the application
 */
import { CalendarEvent } from "./calendar";
import { House } from "./user";

/**
 * Event service interface
 */
export interface EventService {
  /** Fetch events for a user */
  fetchEvents(userId: string, houseId?: string): Promise<CalendarEvent[]>;

  /** Add a new event */
  addEvent(event: Omit<CalendarEvent, "id">): Promise<CalendarEvent>;

  /** Update an existing event */
  updateEvent(event: CalendarEvent): Promise<CalendarEvent>;

  /** Delete an event */
  deleteEvent(eventId: string): Promise<boolean>;
}

/**
 * House service interface
 */
export interface HouseService {
  /** Fetch houses for a user */
  fetchHouses(userId: string): Promise<House[]>;

  /** Add a new house */
  addHouse(house: Omit<House, "houseId">): Promise<House>;

  /** Update an existing house */
  updateHouse(house: House): Promise<House>;

  /** Delete a house */
  deleteHouse(houseId: string): Promise<boolean>;
}

/**
 * Error response from API
 */
export interface ApiError {
  /** Error code */
  code: string;

  /** Error message */
  message: string;
}
</file>

<file path="src/models/store.ts">
/**
 * Store interfaces for the application
 */
import { UserData, House } from "./user";
import { CalendarEvent } from "./calendar";

/**
 * User store state
 */
export interface UserStoreState {
  /** Current user data */
  userData: UserData | null;

  /** Whether data is being loaded */
  isLoading: boolean;

  /** Error message if operation failed */
  error: string | null;

  /** Currently selected house */
  selectedHouse: House | null;

  /** ID of the currently selected house */
  selectedHouseId: string | null;

  /** Function to unsubscribe from Firestore listener */
  unsubscribeUser: (() => void) | null;
}

/**
 * Calendar store state
 */
export interface CalendarStoreState {
  /** List of events */
  events: CalendarEvent[];

  /** Whether events are being loaded */
  isLoading: boolean;

  /** Error message if operation failed */
  error: string | null;

  /** Currently selected event */
  selectedEvent: CalendarEvent | null;
}

/**
 * UI store state for managing UI-related state across components
 */
export interface UiStoreState {
  /** Whether dark mode is enabled */
  darkMode: boolean;

  /** Whether any modal is open */
  isModalOpen: boolean;

  /** Which modal is currently open */
  activeModal: "event" | "house" | "user" | null;

  /** Whether the sidebar is collapsed */
  isSidebarCollapsed: boolean;
}
</file>

<file path="src/models/user.ts">
/**
 * User-related interfaces for the application
 */

/**
 * User authentication information
 */
export interface User {
  /** Unique identifier for the user */
  id: string;

  /** User's email address */
  email: string;

  /** User's display name */
  displayName: string;

  /** URL to user's profile photo */
  photoURL?: string;

  /** User's role in the system */
  role: UserRole;

  /** Whether the user's email is verified */
  emailVerified: boolean;

  /** Timestamp when the user was created */
  createdAt: string;

  /** Timestamp when the user was last updated */
  updatedAt: string;
}

/**
 * Full user data including preferences and houses
 */
export interface UserData extends User {
  houses: House[];
}

/**
 * House data model
 */
export interface House {
  /** Firebase user ID of the owner */
  userId: string;

  /** Unique identifier for the house */
  houseId: string;

  /** House name or address */
  address: string;

  /** Color used for the house events in the calendar */
  color: string;

  /** Whether this house is currently selected */
  selected?: boolean;

  /** Contact number for the house */
  contactnumber?: string;

  /** Default check-in time */
  checkInTime?: string;

  /** Default check-out time */
  checkOutTime?: string;
}

/**
 * User preferences
 */
export interface UserPreferences {
  /** User's preferred language */
  language: string;

  /** User's preferred theme (light/dark) */
  theme: 'light' | 'dark';

  /** User's preferred timezone */
  timezone: string;

  /** User's notification preferences */
  notifications: {
    email: boolean;
    push: boolean;
    calendarUpdates: boolean;
  };
}

export type UserRole = 'admin' | 'manager' | 'user';

export interface UserSettings {
  /** User's general settings */
  preferences: UserPreferences;

  /** User's calendar-specific settings */
  calendar: {
    defaultView: CalendarViewType;
    showWeekends: boolean;
    businessHours: {
      start: string;
      end: string;
    };
  };
}
</file>

<file path="src/plugins/vuetify.ts">
import 'vuetify/styles';
import { createVuetify } from 'vuetify';
import * as components from 'vuetify/components';
import * as directives from 'vuetify/directives';
import { md3 } from 'vuetify/blueprints';
import { aliases, mdi } from 'vuetify/iconsets/mdi';
import '@mdi/font/css/materialdesignicons.css';

// Create Vuetify instance
const vuetify = createVuetify({
  blueprint: md3,
  components,
  directives,
  theme: {
    defaultTheme: 'light',
    themes: {
      light: {
        colors: {
          primary: '#6200ea',
          secondary: '#9c27b0',
          accent: '#03dac6',
          error: '#b00020',
          warning: '#fb8c00',
          info: '#2196f3',
          success: '#4caf50',
          background: '#f5f5f5',
          surface: '#ffffff',
        },
      },
      dark: {
        colors: {
          primary: '#bb86fc',
          secondary: '#03dac6',
          accent: '#6200ea',
          error: '#cf6679',
          warning: '#ffab40',
          info: '#64b5f6',
          success: '#81c784',
          background: '#121212',
          surface: '#1e1e1e',
        },
      },
    },
  },
  icons: {
    defaultSet: 'mdi',
    aliases,
    sets: {
      mdi,
    },
  },
});

export default vuetify;
</file>

<file path="src/router/index.ts">
import { createRouter, createWebHistory } from 'vue-router'

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes: [
    {
      path: '/',
      name: 'home',
      component: () => import('@/views/HomeView.vue')
    },
    {
      path: '/auth',
      name: 'auth',
      component: () => import('@/views/AuthView.vue')
    },
    {
      path: '/calendar',
      name: 'calendar',
      component: () => import('@/views/CalendarView.vue')
    }
  ]
})

export default router
</file>

<file path="src/stores/auth.ts">
import { defineStore } from 'pinia'
import type { AuthState, LoginCredentials, RegisterData, User } from '@/models'

export const useAuthStore = defineStore('auth', {
  state: (): AuthState => ({
    user: null,
    loading: false,
    error: null
  }),

  getters: {
    isAuthenticated: (state) => !!state.user,
    currentUser: (state) => state.user,
    isLoading: (state) => state.loading,
    authError: (state) => state.error
  },

  actions: {
    async login(credentials: LoginCredentials) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual login logic with Firebase
        const user: User = {
          id: 'temp-id',
          email: credentials.email,
          displayName: 'Test User',
          role: 'user',
          emailVerified: true,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        }
        this.user = user
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'An error occurred during login'
        throw error
      } finally {
        this.loading = false
      }
    },

    async register(data: RegisterData) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual registration logic with Firebase
        const user: User = {
          id: 'temp-id',
          email: data.email,
          displayName: data.displayName,
          role: 'user',
          emailVerified: false,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        }
        this.user = user
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'An error occurred during registration'
        throw error
      } finally {
        this.loading = false
      }
    },

    async logout() {
      this.loading = true
      try {
        // TODO: Implement actual logout logic with Firebase
        this.user = null
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'An error occurred during logout'
        throw error
      } finally {
        this.loading = false
      }
    },

    async checkAuth() {
      this.loading = true
      try {
        // TODO: Implement actual auth check with Firebase
        const user = localStorage.getItem('user')
        if (user) {
          this.user = JSON.parse(user)
        }
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'An error occurred during auth check'
        throw error
      } finally {
        this.loading = false
      }
    }
  }
})
</file>

<file path="src/stores/booking.ts">
import { defineStore } from 'pinia'
import type { HouseBooking, BookingStatus, PaymentStatus } from '@/models'

interface BookingStoreState {
  bookings: HouseBooking[]
  selectedBooking: HouseBooking | null
  loading: boolean
  error: string | null
}

export const useBookingStore = defineStore('booking', {
  state: (): BookingStoreState => ({
    bookings: [],
    selectedBooking: null,
    loading: false,
    error: null
  }),

  getters: {
    activeBookings: (state) => state.bookings.filter(booking => booking.status === 'active'),
    pendingBookings: (state) => state.bookings.filter(booking => booking.status === 'pending'),
    cancelledBookings: (state) => state.bookings.filter(booking => booking.status === 'cancelled'),
    isLoading: (state) => state.loading,
    bookingError: (state) => state.error,
    getBookingById: (state) => (id: string) => state.bookings.find(booking => booking.id === id)
  },

  actions: {
    async fetchBookings() {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual bookings fetch from Firebase
        // Mock data for now
        this.bookings = []
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to fetch bookings'
        throw error
      } finally {
        this.loading = false
      }
    },

    async createBooking(booking: Omit<HouseBooking, 'id' | 'createdAt' | 'updatedAt'>) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual booking creation in Firebase
        const newBooking: HouseBooking = {
          ...booking,
          id: crypto.randomUUID(),
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        }
        this.bookings.push(newBooking)
        return newBooking
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to create booking'
        throw error
      } finally {
        this.loading = false
      }
    },

    async updateBooking(bookingId: string, updates: Partial<HouseBooking>) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual booking update in Firebase
        const index = this.bookings.findIndex(booking => booking.id === bookingId)
        if (index !== -1) {
          this.bookings[index] = {
            ...this.bookings[index],
            ...updates,
            updatedAt: new Date().toISOString()
          }
        }
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to update booking'
        throw error
      } finally {
        this.loading = false
      }
    },

    async cancelBooking(bookingId: string) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual booking cancellation in Firebase
        const index = this.bookings.findIndex(booking => booking.id === bookingId)
        if (index !== -1) {
          this.bookings[index] = {
            ...this.bookings[index],
            status: 'cancelled',
            updatedAt: new Date().toISOString()
          }
        }
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to cancel booking'
        throw error
      } finally {
        this.loading = false
      }
    },

    async updatePaymentStatus(bookingId: string, paymentStatus: PaymentStatus) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual payment status update in Firebase
        const index = this.bookings.findIndex(booking => booking.id === bookingId)
        if (index !== -1) {
          this.bookings[index] = {
            ...this.bookings[index],
            paymentStatus,
            updatedAt: new Date().toISOString()
          }
        }
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to update payment status'
        throw error
      } finally {
        this.loading = false
      }
    },

    setSelectedBooking(booking: HouseBooking | null) {
      this.selectedBooking = booking
    }
  }
})
</file>

<file path="src/stores/calendar.ts">
import { defineStore } from 'pinia'
import type {
  CalendarEvent,
  CalendarViewType,
  CalendarConfig,
  TimeSlot,
  CalendarFilters
} from '@/models'

interface CalendarStoreState {
  events: CalendarEvent[]
  currentView: CalendarViewType
  selectedDate: Date | null
  selectedEvent: CalendarEvent | null
  config: CalendarConfig
  filters: CalendarFilters
  loading: boolean
  error: string | null
}

export const useCalendarStore = defineStore('calendar', {
  state: (): CalendarStoreState => ({
    events: [],
    currentView: 'dayGridMonth',
    selectedDate: null,
    selectedEvent: null,
    config: {
      initialView: 'dayGridMonth',
      editable: true,
      selectable: true,
      businessHours: {
        daysOfWeek: [1, 2, 3, 4, 5], // Monday to Friday
        startTime: '09:00',
        endTime: '17:00'
      }
    },
    filters: {},
    loading: false,
    error: null
  }),

  getters: {
    filteredEvents: (state) => {
      let events = [...state.events]

      // Apply filters
      if (state.filters.userId) {
        events = events.filter(event => event.userId === state.filters.userId)
      }
      if (state.filters.houseId) {
        events = events.filter(event => event.houseId === state.filters.houseId)
      }
      if (state.filters.dateRange) {
        events = events.filter(event => {
          const eventDate = new Date(event.start)
          const startDate = new Date(state.filters.dateRange!.start)
          const endDate = new Date(state.filters.dateRange!.end)
          return eventDate >= startDate && eventDate <= endDate
        })
      }

      return events
    },
    isLoading: (state) => state.loading,
    calendarError: (state) => state.error
  },

  actions: {
    async fetchEvents(filters: CalendarFilters = {}) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual events fetch from Firebase
        this.filters = filters
        // Mock data for now
        this.events = []
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to fetch events'
        throw error
      } finally {
        this.loading = false
      }
    },

    async addEvent(event: Omit<CalendarEvent, 'id' | 'createdAt' | 'updatedAt'>) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual event creation in Firebase
        const newEvent: CalendarEvent = {
          ...event,
          id: crypto.randomUUID(),
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        }
        this.events.push(newEvent)
        return newEvent
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to add event'
        throw error
      } finally {
        this.loading = false
      }
    },

    async updateEvent(eventId: string, updates: Partial<CalendarEvent>) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual event update in Firebase
        const index = this.events.findIndex(event => event.id === eventId)
        if (index !== -1) {
          this.events[index] = {
            ...this.events[index],
            ...updates,
            updatedAt: new Date().toISOString()
          }
        }
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to update event'
        throw error
      } finally {
        this.loading = false
      }
    },

    async deleteEvent(eventId: string) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual event deletion in Firebase
        this.events = this.events.filter(event => event.id !== eventId)
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to delete event'
        throw error
      } finally {
        this.loading = false
      }
    },

    setCurrentView(view: CalendarViewType) {
      this.currentView = view
    },

    setSelectedDate(date: Date | null) {
      this.selectedDate = date
    },

    setSelectedEvent(event: CalendarEvent | null) {
      this.selectedEvent = event
    },

    updateConfig(config: Partial<CalendarConfig>) {
      this.config = { ...this.config, ...config }
    }
  }
})
</file>

<file path="src/stores/cleaning-job.ts">
import { defineStore } from 'pinia'
import type { CleaningJob, CleaningJobStatus, CleaningJobType } from '@/models'

interface CleaningJobStoreState {
  jobs: CleaningJob[]
  selectedJob: CleaningJob | null
  loading: boolean
  error: string | null
}

export const useCleaningJobStore = defineStore('cleaning-job', {
  state: (): CleaningJobStoreState => ({
    jobs: [],
    selectedJob: null,
    loading: false,
    error: null
  }),

  getters: {
    scheduledJobs: (state) => state.jobs.filter(job => job.status === 'scheduled'),
    inProgressJobs: (state) => state.jobs.filter(job => job.status === 'in_progress'),
    completedJobs: (state) => state.jobs.filter(job => job.status === 'completed'),
    cancelledJobs: (state) => state.jobs.filter(job => job.status === 'cancelled'),
    rescheduledJobs: (state) => state.jobs.filter(job => job.status === 'rescheduled'),
    isLoading: (state) => state.loading,
    jobError: (state) => state.error,
    getJobById: (state) => (id: string) => state.jobs.find(job => job.id === id),
    getJobsByProperty: (state) => (propertyId: string) => 
      state.jobs.filter(job => job.propertyId === propertyId),
    getJobsByStaff: (state) => (userId: string) => 
      state.jobs.filter(job => job.assignedTo.userId === userId)
  },

  actions: {
    async fetchJobs() {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual jobs fetch from Firebase
        // Mock data for now
        this.jobs = []
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to fetch cleaning jobs'
        throw error
      } finally {
        this.loading = false
      }
    },

    async createJob(job: Omit<CleaningJob, 'id' | 'createdAt' | 'updatedAt'>) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual job creation in Firebase
        const newJob: CleaningJob = {
          ...job,
          id: crypto.randomUUID(),
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        }
        this.jobs.push(newJob)
        return newJob
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to create cleaning job'
        throw error
      } finally {
        this.loading = false
      }
    },

    async updateJob(jobId: string, updates: Partial<CleaningJob>) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual job update in Firebase
        const index = this.jobs.findIndex(job => job.id === jobId)
        if (index !== -1) {
          this.jobs[index] = {
            ...this.jobs[index],
            ...updates,
            updatedAt: new Date().toISOString()
          }
        }
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to update cleaning job'
        throw error
      } finally {
        this.loading = false
      }
    },

    async updateJobStatus(jobId: string, status: CleaningJobStatus) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual status update in Firebase
        const index = this.jobs.findIndex(job => job.id === jobId)
        if (index !== -1) {
          this.jobs[index] = {
            ...this.jobs[index],
            status,
            updatedAt: new Date().toISOString()
          }
        }
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to update job status'
        throw error
      } finally {
        this.loading = false
      }
    },

    async completeJob(jobId: string, completionDetails: Partial<CleaningJob['completion']>) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual job completion in Firebase
        const index = this.jobs.findIndex(job => job.id === jobId)
        if (index !== -1) {
          this.jobs[index] = {
            ...this.jobs[index],
            status: 'completed',
            completion: {
              ...this.jobs[index].completion,
              ...completionDetails,
              completed: true,
              completedAt: new Date().toISOString()
            },
            updatedAt: new Date().toISOString()
          }
        }
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to complete cleaning job'
        throw error
      } finally {
        this.loading = false
      }
    },

    setSelectedJob(job: CleaningJob | null) {
      this.selectedJob = job
    }
  }
})
</file>

<file path="src/stores/house.ts">
import { defineStore } from 'pinia'
import type {
  House,
  HouseStatus,
  HouseAvailability,
  HouseBooking,
  BookingStatus,
  PaymentStatus
} from '@/models'

interface HouseStoreState {
  houses: House[]
  selectedHouse: House | null
  houseAvailability: Record<string, HouseAvailability[]>
  houseBookings: Record<string, HouseBooking[]>
  loading: boolean
  error: string | null
}

export const useHouseStore = defineStore('house', {
  state: (): HouseStoreState => ({
    houses: [],
    selectedHouse: null,
    houseAvailability: {},
    houseBookings: {},
    loading: false,
    error: null
  }),

  getters: {
    activeHouses: (state) => state.houses.filter(house => house.status === 'active'),
    isLoading: (state) => state.loading,
    houseError: (state) => state.error,
    getHouseById: (state) => (id: string) => state.houses.find(house => house.id === id),
    getHouseAvailability: (state) => (houseId: string) => state.houseAvailability[houseId] || [],
    getHouseBookings: (state) => (houseId: string) => state.houseBookings[houseId] || []
  },

  actions: {
    async fetchHouses() {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual houses fetch from Firebase
        // Mock data for now
        this.houses = []
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to fetch houses'
        throw error
      } finally {
        this.loading = false
      }
    },

    async addHouse(house: Omit<House, 'id' | 'createdAt' | 'updatedAt'>) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual house creation in Firebase
        const newHouse: House = {
          ...house,
          id: crypto.randomUUID(),
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        }
        this.houses.push(newHouse)
        return newHouse
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to add house'
        throw error
      } finally {
        this.loading = false
      }
    },

    async updateHouse(houseId: string, updates: Partial<House>) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual house update in Firebase
        const index = this.houses.findIndex(house => house.id === houseId)
        if (index !== -1) {
          this.houses[index] = {
            ...this.houses[index],
            ...updates,
            updatedAt: new Date().toISOString()
          }
        }
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to update house'
        throw error
      } finally {
        this.loading = false
      }
    },

    async deleteHouse(houseId: string) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual house deletion in Firebase
        this.houses = this.houses.filter(house => house.id !== houseId)
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to delete house'
        throw error
      } finally {
        this.loading = false
      }
    },

    async fetchHouseAvailability(houseId: string, startDate: string, endDate: string) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual availability fetch from Firebase
        // Mock data for now
        this.houseAvailability[houseId] = []
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to fetch house availability'
        throw error
      } finally {
        this.loading = false
      }
    },

    async fetchHouseBookings(houseId: string) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual bookings fetch from Firebase
        // Mock data for now
        this.houseBookings[houseId] = []
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to fetch house bookings'
        throw error
      } finally {
        this.loading = false
      }
    },

    setSelectedHouse(house: House | null) {
      this.selectedHouse = house
    }
  }
})
</file>

<file path="src/stores/notification.ts">
import { defineStore } from 'pinia'

interface Notification {
  id: string
  type: 'success' | 'error' | 'warning' | 'info'
  message: string
  duration?: number
  timestamp: string
}

interface NotificationStoreState {
  notifications: Notification[]
  loading: boolean
  error: string | null
}

export const useNotificationStore = defineStore('notification', {
  state: (): NotificationStoreState => ({
    notifications: [],
    loading: false,
    error: null
  }),

  getters: {
    activeNotifications: (state) => state.notifications,
    isLoading: (state) => state.loading,
    notificationError: (state) => state.error
  },

  actions: {
    addNotification(notification: Omit<Notification, 'id' | 'timestamp'>) {
      const newNotification: Notification = {
        ...notification,
        id: crypto.randomUUID(),
        timestamp: new Date().toISOString()
      }
      this.notifications.push(newNotification)

      // Auto-remove notification after duration if specified
      if (notification.duration) {
        setTimeout(() => {
          this.removeNotification(newNotification.id)
        }, notification.duration)
      }
    },

    removeNotification(id: string) {
      this.notifications = this.notifications.filter(n => n.id !== id)
    },

    clearNotifications() {
      this.notifications = []
    },

    addSuccess(message: string, duration?: number) {
      this.addNotification({
        type: 'success',
        message,
        duration
      })
    },

    addError(message: string, duration?: number) {
      this.addNotification({
        type: 'error',
        message,
        duration
      })
    },

    addWarning(message: string, duration?: number) {
      this.addNotification({
        type: 'warning',
        message,
        duration
      })
    },

    addInfo(message: string, duration?: number) {
      this.addNotification({
        type: 'info',
        message,
        duration
      })
    }
  }
})
</file>

<file path="src/stores/property.ts">
import { defineStore } from 'pinia'
import type { Property, PropertyStatus, PropertyType } from '@/models'

interface PropertyStoreState {
  properties: Property[]
  selectedProperty: Property | null
  loading: boolean
  error: string | null
}

export const usePropertyStore = defineStore('property', {
  state: (): PropertyStoreState => ({
    properties: [],
    selectedProperty: null,
    loading: false,
    error: null
  }),

  getters: {
    activeProperties: (state) => state.properties.filter(property => property.status === 'active'),
    isLoading: (state) => state.loading,
    propertyError: (state) => state.error,
    getPropertyById: (state) => (id: string) => state.properties.find(property => property.id === id),
    getPropertiesByType: (state) => (type: PropertyType) => 
      state.properties.filter(property => property.type === type)
  },

  actions: {
    async fetchProperties() {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual properties fetch from Firebase
        // Mock data for now
        this.properties = []
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to fetch properties'
        throw error
      } finally {
        this.loading = false
      }
    },

    async addProperty(property: Omit<Property, 'id' | 'createdAt' | 'updatedAt'>) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual property creation in Firebase
        const newProperty: Property = {
          ...property,
          id: crypto.randomUUID(),
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        }
        this.properties.push(newProperty)
        return newProperty
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to add property'
        throw error
      } finally {
        this.loading = false
      }
    },

    async updateProperty(propertyId: string, updates: Partial<Property>) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual property update in Firebase
        const index = this.properties.findIndex(property => property.id === propertyId)
        if (index !== -1) {
          this.properties[index] = {
            ...this.properties[index],
            ...updates,
            updatedAt: new Date().toISOString()
          }
        }
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to update property'
        throw error
      } finally {
        this.loading = false
      }
    },

    async deleteProperty(propertyId: string) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual property deletion in Firebase
        this.properties = this.properties.filter(property => property.id !== propertyId)
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to delete property'
        throw error
      } finally {
        this.loading = false
      }
    },

    setSelectedProperty(property: Property | null) {
      this.selectedProperty = property
    }
  }
})
</file>

<file path="src/stores/ui.ts">
import { defineStore } from 'pinia'

interface ModalState {
  isOpen: boolean
  component: string | null
  props: Record<string, any>
}

interface UIStoreState {
  modals: Record<string, ModalState>
  loadingStates: Record<string, boolean>
  theme: 'light' | 'dark'
  sidebarOpen: boolean
  error: string | null
}

export const useUIStore = defineStore('ui', {
  state: (): UIStoreState => ({
    modals: {},
    loadingStates: {},
    theme: 'light',
    sidebarOpen: true,
    error: null
  }),

  getters: {
    isModalOpen: (state) => (modalId: string) => state.modals[modalId]?.isOpen || false,
    isLoading: (state) => (loadingId: string) => state.loadingStates[loadingId] || false,
    currentTheme: (state) => state.theme,
    isSidebarOpen: (state) => state.sidebarOpen,
    uiError: (state) => state.error
  },

  actions: {
    openModal(modalId: string, component: string, props: Record<string, any> = {}) {
      this.modals[modalId] = {
        isOpen: true,
        component,
        props
      }
    },

    closeModal(modalId: string) {
      if (this.modals[modalId]) {
        this.modals[modalId].isOpen = false
      }
    },

    setLoading(loadingId: string, isLoading: boolean) {
      this.loadingStates[loadingId] = isLoading
    },

    toggleTheme() {
      this.theme = this.theme === 'light' ? 'dark' : 'light'
    },

    setTheme(theme: 'light' | 'dark') {
      this.theme = theme
    },

    toggleSidebar() {
      this.sidebarOpen = !this.sidebarOpen
    },

    setSidebarOpen(isOpen: boolean) {
      this.sidebarOpen = isOpen
    },

    clearError() {
      this.error = null
    },

    setError(error: string) {
      this.error = error
    }
  }
})
</file>

<file path="src/stores/user.ts">
import { defineStore } from 'pinia'
import type { User, UserPreferences, UserSettings } from '@/models'

interface UserStoreState {
  currentUser: User | null
  preferences: UserPreferences | null
  settings: UserSettings | null
  loading: boolean
  error: string | null
}

export const useUserStore = defineStore('user', {
  state: (): UserStoreState => ({
    currentUser: null,
    preferences: null,
    settings: null,
    loading: false,
    error: null
  }),

  getters: {
    isAdmin: (state) => state.currentUser?.role === 'admin',
    isManager: (state) => state.currentUser?.role === 'manager',
    userPreferences: (state) => state.preferences,
    userSettings: (state) => state.settings,
    isLoading: (state) => state.loading,
    userError: (state) => state.error
  },

  actions: {
    async fetchUserProfile(userId: string) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual user profile fetch from Firebase
        const user: User = {
          id: userId,
          email: 'test@example.com',
          displayName: 'Test User',
          role: 'user',
          emailVerified: true,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        }
        this.currentUser = user
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to fetch user profile'
        throw error
      } finally {
        this.loading = false
      }
    },

    async updateUserProfile(userId: string, updates: Partial<User>) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual user profile update in Firebase
        if (this.currentUser) {
          this.currentUser = { ...this.currentUser, ...updates }
        }
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to update user profile'
        throw error
      } finally {
        this.loading = false
      }
    },

    async fetchUserPreferences(userId: string) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual preferences fetch from Firebase
        const preferences: UserPreferences = {
          language: 'en',
          theme: 'light',
          timezone: 'UTC',
          notifications: {
            email: true,
            push: true,
            calendarUpdates: true
          }
        }
        this.preferences = preferences
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to fetch user preferences'
        throw error
      } finally {
        this.loading = false
      }
    },

    async updateUserPreferences(userId: string, updates: Partial<UserPreferences>) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual preferences update in Firebase
        if (this.preferences) {
          this.preferences = { ...this.preferences, ...updates }
        }
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to update user preferences'
        throw error
      } finally {
        this.loading = false
      }
    },

    async fetchUserSettings(userId: string) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual settings fetch from Firebase
        const settings: UserSettings = {
          preferences: {
            language: 'en',
            theme: 'light',
            timezone: 'UTC',
            notifications: {
              email: true,
              push: true,
              calendarUpdates: true
            }
          },
          calendar: {
            defaultView: 'dayGridMonth',
            showWeekends: true,
            businessHours: {
              start: '09:00',
              end: '17:00'
            }
          }
        }
        this.settings = settings
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to fetch user settings'
        throw error
      } finally {
        this.loading = false
      }
    },

    async updateUserSettings(userId: string, updates: Partial<UserSettings>) {
      this.loading = true
      this.error = null
      try {
        // TODO: Implement actual settings update in Firebase
        if (this.settings) {
          this.settings = { ...this.settings, ...updates }
        }
      } catch (error) {
        this.error = error instanceof Error ? error.message : 'Failed to update user settings'
        throw error
      } finally {
        this.loading = false
      }
    }
  }
})
</file>

<file path="src/types/auth.d.ts">
import type { Auth } from "firebase/auth";

declare module "@/auth" {
  export const auth: Auth;
}
</file>

<file path="src/types/calendar.ts">
import type { EventInput } from "@fullcalendar/core";

export interface CalendarEvent extends EventInput {
  id: string;
  userId: string;
  turn?: boolean;
  turndate?: string;
  color?: string;
}

export interface CalendarViewOption {
  title: string;
  value: string;
}

export interface CalendarProps {
  view?: string;
  selectedHouseId?: string;
}

export interface CalendarEmits {
  (
    e: "openEventModal",
    data: { startDate: string; endDate: string; event: CalendarEvent | null }
  ): void;
  (e: "updateEvent", event: CalendarEvent): void;
  (e: "deleteEvent", eventId: string): void;
}

export interface CalendarOptions {
  plugins: any[];
  headerToolbar: {
    left: string;
    center: string;
    right: string;
  };
  initialView: string;
  height: number;
  eventDidMount: (info: any) => void;
  dayCellDidMount: (arg: any) => void;
  datesSet: (dateInfo: any) => void;
  selectable: boolean;
  select: (selectInfo: any) => void;
  eventClick: (clickInfo: any) => void;
  events: (
    fetchInfo: any,
    successCallback: (events: CalendarEvent[]) => void,
    failureCallback: (error: Error) => void
  ) => Promise<void>;
  eventResize: (eventResizeInfo: any) => Promise<void>;
  editable: boolean;
  eventDrop: (eventDropInfo: any) => Promise<void>;
  dayMaxEventRows: boolean;
  lazyFetching: boolean;
  rerenderDelay: number;
}
</file>

<file path="src/types/components.d.ts">
declare module "@/components/ui/TimePicker.vue" {
  import type { DefineComponent } from "vue";
  const component: DefineComponent<{
    modelValue: string;
    isVisible: boolean;
  }>;
  export default component;
}
</file>

<file path="src/types/firebase.d.ts">
import type { Firestore } from "firebase/firestore";

declare module "@/firebaseConfig" {
  export const db: Firestore;
}
</file>

<file path="src/types/home.ts">
import type { CalendarEvent } from "./calendar";

export interface EventData {
  userId?: string;
  title: string;
  start: string;
  end: string;
  houseId?: string;
  description?: string;
  [key: string]: any;
}

export interface HomeProps {
  userId?: string;
  view?: string;
}

export interface HomeEmits {
  (
    e: "openEventModal",
    data: {
      event: CalendarEvent | undefined;
      startDate: string;
      endDate: string;
    }
  ): void;
  (e: "createEvent", eventData: EventData): Promise<any>;
  (e: "updateEvent", eventData: EventData): Promise<void>;
  (e: "deleteEvent", eventId: string): Promise<void>;
}
</file>

<file path="src/types/house.ts">
export interface House {
  id: string;
  name: string;
  address: string;
  userId: string;
  createdAt: string;
  updatedAt: string;
}

export interface HouseModalProps {
  modelValue: boolean;
}

export interface HouseModalEmits {
  (e: "update:modelValue", value: boolean): void;
  (e: "close"): void;
  (
    e: "create",
    house: Omit<House, "id" | "createdAt" | "updatedAt">
  ): Promise<void>;
}
</file>

<file path="src/types/timeManagement.d.ts">
export interface TimeManagement {
  checkInTimeDialog: boolean;
  checkOutTimeDialog: boolean;
  turncheckintime: string;
  turncheckouttime: string;
  updateCheckInTime: (time: string) => void;
  updateCheckOutTime: (time: string) => void;
}

declare module "@/composables/useTimeManagement" {
  export function useTimeManagement(): TimeManagement;
}
</file>

<file path="src/types/userStore.d.ts">
import type { Store } from "pinia";

export interface UserData {
  houses?: Array<{
    houseId: string;
    [key: string]: any;
  }>;
  [key: string]: any;
}

export interface UserStore extends Store {
  userData: UserData | null;
}

declare module "@/stores/userStore" {
  export function useUserStore(): UserStore;
}
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{vue,js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          DEFAULT: 'var(--primary)',
          dark: 'var(--primary-dark)',
        },
        secondary: {
          DEFAULT: 'var(--secondary)',
          dark: 'var(--secondary-dark)',
        },
        accent: {
          DEFAULT: 'var(--accent)',
          dark: 'var(--accent-dark)',
        },
        danger: {
          DEFAULT: 'var(--danger)',
          dark: 'var(--danger-dark)',
        },
        success: {
          DEFAULT: 'var(--success)',
          dark: 'var(--success-dark)',
        },
        warning: {
          DEFAULT: 'var(--warning)',
          dark: 'var(--warning-dark)',
        },
        info: {
          DEFAULT: 'var(--info)',
          dark: 'var(--info-dark)',
        },
      },
    },
  },
  plugins: [],
  darkMode: 'class',
}
</file>

<file path="tsconfig.json">
{
  "extends": "@vue/tsconfig/tsconfig.dom.json",
  "include": ["env.d.ts", "src/**/*", "src/**/*.vue"],
  "exclude": ["src/**/__tests__/*"],
  "compilerOptions": {
    "composite": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "noImplicitThis": true,
    "alwaysStrict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,
    "noImplicitOverride": true,
    "allowJs": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "moduleResolution": "node",
    "target": "ESNext",
    "module": "ESNext",
    "types": ["vite/client", "node"],
    "jsx": "preserve",
    "resolveJsonModule": true,
    "isolatedModules": true
  }
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "composite": true,
    "module": "ESNext",
    "moduleResolution": "node",
    "allowSyntheticDefaultImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite';
import vue from '@vitejs/plugin-vue';
import { fileURLToPath, URL } from 'node:url';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [vue()],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  },
  server: {
    port: 3000,
    open: true
  },
  build: {
    outDir: 'dist',
    assetsDir: 'assets',
    sourcemap: true,
    minify: 'terser',
    terserOptions: {
      compress: {
        drop_console: true,
        drop_debugger: true
      }
    }
  }
});
</file>

<file path="package.json">
{
  "name": "refactored-calendar-app",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vue-tsc && vite build",
    "preview": "vite preview",
    "lint": "eslint . --ext .vue,.js,.jsx,.cjs,.mjs,.ts,.tsx,.cts,.mts --fix --ignore-path .gitignore",
    "format": "prettier --write src/",
    "typecheck": "vue-tsc --noEmit"
  },
  "dependencies": {
    "@vueuse/core": "^10.7.0",
    "firebase": "^10.7.0",
    "pinia": "^2.1.7",
    "vue": "^3.3.8",
    "vue-router": "^4.2.5"
  },
  "devDependencies": {
    "@rushstack/eslint-patch": "^1.3.3",
    "@types/node": "^20.10.0",
    "@vitejs/plugin-vue": "^4.5.0",
    "@vue/eslint-config-prettier": "^8.0.0",
    "@vue/eslint-config-typescript": "^12.0.0",
    "@vue/tsconfig": "^0.4.0",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.49.0",
    "eslint-plugin-vue": "^9.17.0",
    "postcss": "^8.4.31",
    "prettier": "^3.0.3",
    "tailwindcss": "^3.3.5",
    "typescript": "~5.2.2",
    "vite": "^5.0.0",
    "vue-tsc": "^1.8.22"
  }
}
</file>

<file path="src/router.ts">
import { createRouter, createWebHistory } from 'vue-router';
import type { RouteRecordRaw } from 'vue-router';

// Route definitions
const routes: RouteRecordRaw[] = [
  {
    path: '/',
    redirect: '/login'
  },
  {
    path: '/register',
    name: 'Register',
    component: () => import('./components/auth/RegisterView.vue'),
    meta: { requiresAuth: false }
  },
  {
    path: '/home',
    name: 'Home',
    component: () => import('./components/calendar/CalendarView.vue'),
    meta: { requiresAuth: true }
  },
  {
    path: '/profile',
    name: 'Profile',
    component: () => import('./components/auth/UserProfileView.vue'),
    meta: { requiresAuth: true }
  },
  {
    path: '/:pathMatch(.*)*',
    name: 'NotFound',
    component: () => import('./components/ui/NotFoundView.vue')
  }
];

// Create router instance
const router = createRouter({
  history: createWebHistory(),
  routes
});

// Navigation guards for authentication
router.beforeEach((to, from, next) => {
  const requiresAuth = to.matched.some(record => record.meta.requiresAuth);
  const isAuthenticated = !!localStorage.getItem('user');

  if (requiresAuth && !isAuthenticated) {
    next('/login');
  } else {
    next();
  }
});

export default router;
</file>

<file path="README.md">
# Calendar Booking Application (Refactored)

This is a refactored version of the booking calendar application, focusing on clean architecture, TypeScript, and maintainable code.

## Project Structure##

 Hello this is a test to see if my repos are synced up

```
src/
├── assets/           # Static assets
├── components/       # Reusable UI components
│   ├── auth/         # Authentication components
│   ├── calendar/     # Calendar-specific components
│   ├── ui/           # Base UI components
│   └── layout/       # Layout components
├── composables/      # Reusable logic
├── constants/        # App constants and enums
├── models/           # TypeScript interfaces and types
├── services/         # API and external service integration
├── stores/           # Pinia stores
└── utils/            # Utility functions
```

## Technology Stack

- Vue 3 with Composition API
- TypeScript
- Pinia for state management
- Vue Router
- Vuetify for UI components
- FullCalendar for calendar functionality
- Firebase for backend/authentication

## Development Setup

### Prerequisites
- Node.js (LTS version)
- pnpm

### Installation

```bash
# Install dependencies
pnpm install

# Start development server
pnpm dev

# Build for production
pnpm build

# Preview production build
pnpm preview

# Lint and fix files
pnpm lint

# Format code
pnpm format

# Type check
pnpm typecheck
```

## Using pnpm

This project uses pnpm as the package manager. If you don't have pnpm installed, you can install it globally:

```bash
npm install -g pnpm
```

Or use npx to run it without installing:

```bash
npx pnpm install
```

## Code Conventions

- Use TypeScript for all files
- Follow consistent naming: camelCase for variables/methods, PascalCase for components
- Use Composition API with `<script setup>` syntax
- Document public APIs with JSDoc comments
- Extract reusable logic into composables
- Use interfaces for data models # REFACTORED_CODEBASE
</file>

</files>
